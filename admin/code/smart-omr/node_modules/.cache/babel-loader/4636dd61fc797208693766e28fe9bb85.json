{"remainingRequest":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/babel-loader/lib/index.js!/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js??ref--0-0!/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/src/components/Uploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/src/components/Uploader.vue","mtime":1553030933541},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Quotes from '../components/Quotes.vue';\nimport Vue from 'vue';\nimport FileUpload from 'vue-upload-component';\nVue.filter('formatSize', function (size) {\n  if (size > 1024 * 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024 / 1024).toFixed(2) + ' TB';\n  } else if (size > 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024).toFixed(2) + ' GB';\n  } else if (size > 1024 * 1024) {\n    return (size / 1024 / 1024).toFixed(2) + ' MB';\n  } else if (size > 1024) {\n    return (size / 1024).toFixed(2) + ' KB';\n  }\n\n  return size.toString() + ' B';\n});\nexport default {\n  components: {\n    FileUpload: FileUpload,\n    Quotes: Quotes\n  },\n  props: ['showStartUpoadButton', 'showStartAllOver', 'showStopUpoadButton', 'startMarking', 'serverStatusText', 'current_progress_control_container_class', 'current_bottom_main_grey_background_class', 'current_bottom_green_background_class', 'current_progress_text_class', 'current_spanprogresstext_class', 'main_holdin_container', 'showProgressHolder', 'showQuotes'],\n  data: function data() {\n    return {\n      files: [],\n      filesAvailable: false,\n      quotes: [],\n      show_quote: true,\n      accept: 'image/png,image/gif,image/jpeg',\n      extensions: 'jpg,jpeg,png',\n      // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],\n      // extensions: /\\.(gif|jpe?g|png|webp)$/i,\n      // var full = location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '');\n      // xhr.url=\"http://localhost/git-collaborations/tcexam/admin/code/tce_quotes.php\";\n      webserver_url: location.protocol + '//' + location.hostname,\n      minSize: 1024,\n      size: 1024 * 1024 * 50,\n      multiple: true,\n      computationOngoin: false,\n      directory: false,\n      drop: true,\n      dropDirectory: true,\n      addIndex: false,\n      thread: 10,\n      name: 'omrfile',\n      server_script_path: 'git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php',\n      status_upgrade_script_path: 'git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor_status.php',\n      // putAction: '/upload/put',\n      headers: {// 'X-Csrf-Token': 'xxxx',\n      },\n      data: {\n        'job_id': this.ongoingServerPollTimestamp,\n        total_number_files: this.files ? this.files.length : 0,\n        error: 'true'\n      },\n      autoCompress: 1024 * 1024,\n      uploadAuto: false,\n      isOption: false,\n      addData: {\n        show: false,\n        name: '',\n        type: '',\n        content: ''\n      },\n      editFile: {\n        show: false,\n        name: ''\n      },\n      lasyYScroll: undefined,\n      ongoingServerPollTimestamp: undefined,\n      currentMarkingSessionAbortedWithError: false,\n      reportedJobs: [],\n      intervalQueryStatus: 7000,\n\n      /******** C O N D I T I O N A L    D I S P L A Y S ********/\n      showUploadUI: true,\n      displayLoadingImage: true,\n      showLoadingMode: false,\n      showPercentageCompletion: false,\n      showCompletionCheckmark: false,\n      showFinalStatus: false,\n      showGreenWorkingBackground: false,\n      isMounted: false,\n      markingPercentageProgress: 1,\n\n      /******** C S S    C L A S S E S ********/\n      current_working_backround_class: {}\n      /******** C S S    C L A S S E S ********/\n\n    };\n  },\n  mounted: function mounted() {\n    var that = this;\n    this.$nextTick(function () {\n      this.ongoingServerPollTimestamp = new Date().getTime();\n      this.isMounted = true;\n    });\n  },\n  computed: {\n    enableResendUpload: function enableResendUpload() {\n      //after compelted mrking successfully, we need tihis to allow be able to do another makring\n      return this.files && this.files.length > 0;\n    },\n    postAction: function postAction() {\n      return \"\".concat(this.webserver_url, \"/git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php\");\n    },\n    allUploadsCompleted: function allUploadsCompleted() {\n      if (this.isMounted) {\n        return this.$refs.upload && this.$refs.upload.uploaded && this.files.length > 0;\n      }\n    },\n    isCurrentlyUploading: function isCurrentlyUploading() {\n      if (this.isMounted) {\n        return this.$refs.upload.active;\n      }\n    },\n    morphable_LoadingClass: function morphable_LoadingClass() {\n      this.showCompletionCheckmark = !this.showLoadingMode;\n      this.showPercentageCompletion = this.showLoadingMode;\n\n      if (this.showLoadingMode) {\n        return {\n          \"load-complete\": false\n        };\n      } else {\n        return {\n          \"load-complete\": true\n        };\n      }\n    },\n    greenWorkingBackground: function greenWorkingBackground() {\n      return this.current_bottom_green_background_class;\n    },\n    greyMainBackground: function greyMainBackground() {\n      return this.current_bottom_main_grey_background_class;\n    },\n    uploadCompleted: function uploadCompleted() {\n      //try optimize for when multiple progress reports will be updating\n      if (this.computationOngoin) {\n        return;\n      }\n\n      this.computationOngoin = true;\n      var complete = 0;\n\n      for (var i = this.files.length - 1; i >= 0; i--) {\n        var prog = Number(this.files[i].progress);\n        complete += prog == 100 ? 1 : 0; //retry it if it stopped uploading\n        //we are checking preence of xhr because that is what confirms that\n        //there was a failed attempt to upload the file (conf. completely\n        //unattempted file e.g. when file rejected coz extension is part of\n        //blacklisted)\n\n        if (prog < 100 && this.files[i].xhr && !this.files[i].xhr.readyState == 4) {\n          //automatically retry upload\n          this.$refs.update(this.files[i], {\n            active: true,\n            error: '',\n            progress: '0.00'\n          });\n        }\n      }\n\n      this.computationOngoin = false;\n      return complete == this.files.length;\n    }\n  },\n  watch: {\n    allUploadsCompleted: function allUploadsCompleted(currVal, oldval) {\n      if (currVal) {\n        this.sendServerUploadsCompletedMessage(); //so server can set some specific error meesaages if need be\n        //notify users if there are erroneous fils too\n\n        for (var i = this.files.length - 1; i >= 0; i--) {\n          if (this.files[i].error) {\n            //empty server status text so to thr green background is not renderes (watchers!)\n            this.currentMarkingSessionAbortedWithError = true;\n            this.$emit('serverStatusText', null);\n            this.$emit('alert', 'You have file(s) with error. Please check the files you added for marking and try again', 1);\n            return;\n          }\n        }\n      }\n    },\n    'addData.show': function addDataShow(show) {\n      if (show) {\n        this.addData.name = '';\n        this.addData.type = '';\n        this.addData.content = '';\n      }\n    },\n    startMarking: function startMarking() {\n      this.doUITransitionToStartMarking();\n    },\n    files: function files() {\n      this.$emit('files_change', this.files);\n      this.filesAvailable = this.files && this.files.length > 0;\n      this.showOrHideGreenWorkingBackground();\n      this.data.total_number_files = this.files ? this.files.length : 0;\n    },\n    serverStatusText: function serverStatusText() {\n      this.showOrHideGreenWorkingBackground();\n    },\n    ongoingServerPollTimestamp: function ongoingServerPollTimestamp() {\n      this.data.job_id = this.ongoingServerPollTimestamp;\n    },\n    'isCurrentlyUploading': function isCurrentlyUploading(new_val, old_val) {\n      if (new_val) {\n        //don't redo if there is an ongoing polling\n        if (!!this.ongoingServerPollTimestamp == false) {\n          this.ongoingServerPollTimestamp = new Date().getTime();\n          this.start_polling_server_for_status_updates();\n        }\n      } else {\n        //ensure not to trigger on first vm mount - nothing is there to poll sever for yet\n        if (this.$refs.upload && this.$refs.upload.uploaded && this.files.length > 0 && this.ongoingServerPollTimestamp) {\n          //do one last request, so that if race condition makes staus polling to not return anyting, there is now a single final last chance to get status for this just concluded stuff\n          this.start_polling_server_for_status_updates(null, true, Number(this.ongoingServerPollTimestamp));\n        }\n      }\n    }\n  },\n  methods: {\n    stopUploads: function stopUploads() {\n      try {\n        this.$refs.upload.active = false;\n      } catch (Ex) {}\n\n      this.$emit('serverStatusText', \"\");\n    },\n    doUpload: function doUpload() {\n      //don't forget to set serverstatustext, so that the necessary ui changes will be effected (e.g. displying of the progress status text area)\n      this.currentMarkingSessionAbortedWithError = false;\n      this.displayLoadingImage = true;\n\n      if (this.allUploadsCompleted) {\n        //we are reuploading...\n        if (this.$refs.upload && this.$refs.upload.uploaded && this.files.length > 0) {\n          //make it retry\n          for (var i = this.files.length - 1; i >= 0; i--) {\n            //automatically retry upload\n            this.$refs.upload.update(this.files[i], {\n              active: true,\n              error: '',\n              success: false,\n              progress: '0.00'\n            });\n          }\n        }\n\n        this.$refs.upload.active = true;\n        this.$emit('serverStatusText', 'Uploading files to server...');\n      } else {\n        //ths is the very begniiing\n        this.$refs.upload.active = true;\n        this.$emit('serverStatusText', 'Uploading files to server...');\n      }\n    },\n    handle_server_status_message: function handle_server_status_message(message, job_id\n    /* , promise */\n    ) {\n      //we follow this convention: starting with 'e:' means error. while startig with 's:' means it is a status meaasge\n      var prefix = message.substr(0, 2); //treat according to if it is tagged or not (tagged is either s: OR e: for status message OR error message respectively) - i.e. 2nd char is ':'\n\n      var _mssg = message[1] == ':' ? message.substr(2) : message;\n\n      if (prefix == 's:') {\n        try {\n          var data = JSON.parse(_mssg);\n\n          if (data.marking_completed_successfully) {\n            this.$emit('_markingCompletedSuccessfully');\n            this.displayLoadingImage = false; //this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n\n            this.ongoingServerPollTimestamp = undefined;\n          } else {\n            this.$emit('serverStatusText', data.status_text);\n            this.markingPercentageProgress = data.percentage_progress;\n          }\n        } catch (Ex) {\n          this.reportErrorAsAlertPopoup(\"Error occured: \".concat(Ex, \" (\").concat(_mssg, \")\"));\n        }\n      } else {\n        this.ongoingServerPollTimestamp = undefined;\n        this.reportErrorAsAlertPopoup(_mssg);\n      } // promise.resolve();\n\n    },\n    reportErrorAsAlertPopoup: function reportErrorAsAlertPopoup(_mssg) {\n      //destroy it, so that if there is any ongoing server request as at time this was set,\n      //the logic will discountence server response\n      this.ongoingServerPollTimestamp = undefined;\n      this.$emit('_showErrorThatTerminatesOngoingMarking', _mssg);\n      this.displayLoadingImage = false; //this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n    },\n    startAllOver: function startAllOver() {\n      //means we have already uploaded some stuff. We want to redo it\n      //we need to reset stuff too\n      this.$emit('_startAllOver', null);\n    },\n    showOrHideGreenWorkingBackground: function showOrHideGreenWorkingBackground() {\n      this.showGreenWorkingBackground = this.isCurrentlyUploading || this.serverStatusText != undefined && this.serverStatusText.length > 0; // if(showGreenWorkingBackground){\n      //   this.current_bottom_green_background_class = this.parent.data.;\n      // }\n    },\n    inputFilter: function inputFilter(newFile, oldFile, prevent) {\n      if (newFile && !oldFile) {\n        // Before adding a file\n        // 添加文件前\n        // Filter system files or hide files\n        // 过滤系统文件 和隐藏文件\n        if (/(\\/|^)(Thumbs\\.db|desktop\\.ini|\\..+)$/.test(newFile.name)) {\n          return prevent();\n        }\n      }\n\n      if (newFile && (!oldFile || newFile.file !== oldFile.file)) {\n        // Create a blob field\n        // 创建 blob 字段\n        newFile.blob = '';\n        var URL = window.URL || window.webkitURL;\n\n        if (URL && URL.createObjectURL) {\n          newFile.blob = URL.createObjectURL(newFile.file);\n        } // Thumbnails\n        // 缩略图\n\n\n        newFile.thumb = '';\n\n        if (newFile.blob && newFile.type.substr(0, 6) === 'image/') {\n          newFile.thumb = newFile.blob;\n        }\n      }\n    },\n    // add, update, remove File Event\n    inputFile: function inputFile(newFile, oldFile) {\n      //this happens if we are doing another round of marking after the firs tone successful\n      if (!!this.ongoingServerPollTimestamp == false) {\n        this.ongoingServerPollTimestamp = new Date().getTime();\n      }\n\n      if (newFile && oldFile == undefined) {\n        this.data.total_number_files = this.files ? this.files.length : 0;\n        var newData = this.data;\n        this.$refs.upload.update(newFile, {\n          data: newData\n        });\n      }\n\n      if (newFile && oldFile) {\n        // update\n        if (newFile.active && !oldFile.active) {\n          // beforeSend\n          // min size\n          if (newFile.size >= 0 && this.minSize > 0 && newFile.size < this.minSize) {\n            this.$refs.upload.update(newFile, {\n              error: 'size'\n            });\n          }\n        }\n\n        if (newFile.progress !== oldFile.progress) {\n          // progress\n          // console.log('progress:', oldFile , newFile)\n          // this.files = this.$refs.files;\n          if (Number(newFile.progress) == 100) {// console.log(newFile.xhr);\n          }\n        }\n\n        if (newFile.error && !oldFile.error) {// error\n        }\n\n        if (newFile.success && !oldFile.success) {// success\n        }\n\n        if (newFile && oldFile && !newFile.active && oldFile.active) {\n          // Get response data\n          if (newFile.xhr && newFile.response) {\n            if (newFile.response.indexOf(\"will start marking\") >= 0) {\n              //signal that server is waiting for go-ahead command to commence marking\n              if (this.ongoingServerPollTimestamp && this.reportedJobs.indexOf(this.ongoingServerPollTimestamp) == -1) {\n                this.reportedJobs.push(this.ongoingServerPollTimestamp);\n                this.$emit('_allUploadsCompleted');\n                this.sendServerCommand('startProessingUploadedScripts');\n                console.log(\"server now commanded\");\n              } else {// no ongoing jobs or job already submitted\n              }\n            } else {\n              if (newFile.response.indexOf(\"expecting more data\") >= 0) {//server is still expecting more files\n              } else {\n                var temp = document.createElement(\"div\");\n                temp.innerHTML = newFile.response;\n                console.error(\"Error: \", temp.textContent || temp.innerText || \"\");\n              }\n            }\n          }\n        }\n\n        var _node_ = document.getElementById(newFile.id);\n\n        if (_node_) {\n          _node_.scrollIntoView();\n        }\n      }\n\n      if (!newFile && oldFile) {\n        if (oldFile.response) {} // console.log('response: ' + oldFile.response)\n        // console.log( oldFile.xhr );\n        // remove\n\n\n        if (oldFile.success && oldFile.response.id) {// $.ajax({\n          //   type: 'DELETE',\n          //   url: '/upload/delete?id=' + oldFile.response.id,\n          // })\n        }\n      } // Automatically activate upload\n\n\n      if (Boolean(newFile) !== Boolean(oldFile) || oldFile.error !== newFile.error) {\n        if (this.uploadAuto && !this.$refs.upload.active) {\n          this.$refs.upload.active = true;\n        }\n      }\n    },\n    doUITransitionToStartMarking: function doUITransitionToStartMarking() {\n      /*\n      //loader img disappears\n      //the light green background enlarges to fill the screen\n      //red colored progress stuff becomes the progress bar\n      //quotes appear underneath the progressbar\n      //center of progressbar shows percentage completion\n      //at anytime that error occurs along the way, clear evrrything and use Swal to handle it\n      */\n      this.$parent.doUITransition(\"All Uploads Successful\");\n    },\n    get_quotes_from_db: function get_quotes_from_db() {\n      var vm = this;\n      var xhr = new XMLHttpRequest();\n      xhr.url = \"\".concat(this.webserver_url, \"/git-collaborations/tcexam/admin/code/tce_quotes.php\\\"\");\n      xhr.open(\"GET\", xhr.url, true);\n      xhr.retry = 1; //Send the proper header information along with the request\n      // xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n      xhr.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            // Request finished. Do processing here.\n            // console.log(xhr.responseText);\n            //eslint-disable-next-line\n            try {\n              var quotes = _toConsumableArray(JSON.parse(xhr.responseText));\n\n              vm.quotes.splice(0, 0, quotes);\n            } catch (Ex) {\n              console.log(Ex);\n              console.log(xhr);\n            }\n          } else {\n            console.log(xhr);\n            console.log(xhr.status); //redo the request\n\n            this.retry++;\n\n            if (this.retry < 10) {\n              this.open(\"GET\", xhr.url, true);\n              this.send();\n            }\n          }\n        } else {//redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.send(\"foo=bar&lorem=ipsum\"); // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n    start_polling_server_for_status_updates: function start_polling_server_for_status_updates() {\n      var xhr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var isFinalRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var _ongoingServerPollTimestamp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var vm = this;\n\n      if (xhr == null) {\n        xhr = new XMLHttpRequest();\n        xhr.url = \"\".concat(this.webserver_url, \"/\").concat(this.status_upgrade_script_path); // xhr.url=`${this.webserver_url}/${this.status_upgrade_script_path}?getStatus=true&job_id=${this.ongoingServerPollTimestamp}`;\n\n        xhr.retry = 1;\n        xhr.ongoingServerPollTimestamp = this.ongoingServerPollTimestamp;\n        xhr.isFinalRequest = isFinalRequest;\n      }\n\n      xhr.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            // Request finished. Do processing here.\n            try {\n              if (vm.currentMarkingSessionAbortedWithError) {\n                return;\n              } //when undefned, it means some request came back before this status update and there is no new request (which would have set the undefined to the new jobid)\n              //so we only need to discontence this one if and only if there is actually a new, valid, marking going on (i.e. ongoingServerPollTimestamp is set to another valid jobid intwger)\n\n\n              if (xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp || !!vm.ongoingServerPollTimestamp == false) {\n                //emptiness means non of the other file upload requests has had the chance to write to the db while this one is making his own request\n                if (xhr.responseText.length > 1) {\n                  vm.handle_server_status_message(xhr.responseText, xhr.ongoingServerPollTimestamp);\n                } //we only need to resend if we are still the regigning job in town!\n                //prevent sending when they are both undefined (as in isFInalRequest)\n\n\n                if (xhr.ongoingServerPollTimestamp && xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp) {\n                  setTimeout(function () {\n                    vm.start_polling_server_for_status_updates(xhr);\n                  }, vm.intervalQueryStatus);\n                }\n              } else {\n                if (isFinalRequest) {\n                  vm.handle_server_status_message(xhr.responseText, xhr.ongoingServerPollTimestamp);\n                }\n              }\n            } catch (Ex) {\n              console.log(Ex);\n              console.log(xhr);\n            }\n          } else {\n            console.log(xhr);\n            console.log(xhr.status); //redo the request\n\n            this.retry++;\n\n            if (this.retry < 3) {\n              if (xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp) {\n                vm.start_polling_server_for_status_updates(xhr);\n              }\n            }\n          }\n        } else {//redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(\"getStatus=true&job_id=\".concat(_ongoingServerPollTimestamp ? _ongoingServerPollTimestamp : this.ongoingServerPollTimestamp, \"&isFinalRequest=\").concat(!!isFinalRequest)); // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n    },\n    sendServerUploadsCompletedMessage: function sendServerUploadsCompletedMessage() {\n      var xhr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var vm = this;\n\n      if (xhr == null) {\n        xhr = new XMLHttpRequest();\n        xhr.url = \"\".concat(this.webserver_url, \"/\").concat(this.server_script_path);\n        xhr.retry = 1;\n        xhr.sentData = \"all_available_files_uploaded=true&job_id=\".concat(this.ongoingServerPollTimestamp);\n      }\n\n      xhr.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {//we good\n          } else {\n            console.log(xhr);\n            console.log(xhr.status); //redo the request\n\n            this.retry++;\n\n            if (this.retry < 10) {\n              vm.sendServerUploadsCompletedMessage(xhr);\n            }\n          }\n        } else {//redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true); //Send the proper header information along with the request\n\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData); // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n    sendServerCommand: function sendServerCommand(command) {\n      var xhr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var vm = this;\n\n      if (xhr == null) {\n        var query = \"\";\n\n        switch (command) {\n          case 'startProessingUploadedScripts':\n            query = \"startProessingUploadedScripts=true&job_id=\" + this.ongoingServerPollTimestamp;\n            break;\n        }\n\n        xhr = new XMLHttpRequest();\n        xhr.url = \"\".concat(this.webserver_url, \"/\").concat(this.server_script_path); // xhr.sentData = `startProessingUploadedScripts=true&job_id=${Number(this.ongoingServerPollTimestamp)}`;\n\n        xhr.sentData = query;\n        xhr.retry = 1;\n      }\n\n      xhr.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {//any errors should have been handled by the server\n          } else {\n            console.log(xhr);\n            console.log(xhr.status); //redo the request\n\n            this.retry++;\n\n            if (this.retry < 10) {\n              vm.sendServerCommand(command, xhr);\n            }\n          }\n        } else {//redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true); //Send the proper header information along with the request\n\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData); // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    }\n  }\n};",{"version":3,"sources":["Uploader.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"upload\" v-show=\"!isOption\">\n    <div class=\"absolute w-full h-full\">\n      <div v-if=\"showUploadUI && !files.length\">\n          <div class=\"dropbox text-center absolute p-5 w-full h-full\">\n            <h4>Drop folder to upload...</h4>\n            <!-- <br/>\n            OR\n            <br/>\n            <label for=\"omrfile\" class=\"btn btn-lg btn-primary\">Select Files</label> -->\n            <div v-show=\"$refs.upload && $refs.upload.dropActive\" class=\"drop-active mt-5\">\n              <h3 class=\"font-sans\">Drop folder to upload</h3>\n            </div>\n          </div>\n      </div>\n\n      <table class=\"mostly-customized-scrollbar drop-table overflow-auto h-full w-full pb-24 block absolute\">\n        <thead v-show=\"files.length\">\n          <tr class=\"bg-pink-light w-full font-sans\">\n            <th> #</th>\n            <th>Thumbnail</th>\n            <th>Name</th>\n            <th>Size</th>\n            <th>Speed</th>\n            <th>Status</th>\n            <th class=\"w-full\">Action</th>\n          </tr>\n        </thead>\n        <tbody class=\"\">\n            <tr v-for=\"(file, index) in files\" :key=\"file.id\"  class=\" font-mono text-sm hover:bg-blue-lighter cursor-pointer \"  :class=\"{'bg-red-light': file.error && file.error!='denied'}\">\n              <td>{{index+1}}</td>\n              <td class=\"whitespace-no-wrap\">\n                <img v-if=\"file.thumb\" :src=\"file.thumb\" width=\"40\" height=\"auto\" />\n                <span v-else>No Image</span>\n              </td>\n              <td>\n                <div class=\"filename whitespace-no-wrap\">\n                  {{file.name}}\n                </div>\n                <div :id=\"file.id\" class=\"progress\" v-if=\"file.active || file.progress !== '0.00'\">\n                  <div :class=\"{'progress-bar': true, 'progress-bar-striped': true, 'bg-green': Number(file.progress) != 100 , 'bg-danger': file.error, 'progress-bar-animated': file.active}\" role=\"progressbar\" :style=\"{width: file.progress + '%'}\">\n                    {{file.progress}}%\n                  </div>\n                </div>\n              </td>\n              <td class=\"whitespace-no-wrap\">{{file.size | formatSize}}</td>\n              <td class=\"whitespace-no-wrap\">{{file.speed | formatSize}}</td>\n\n              <td class=\"whitespace-no-wrap\" v-if=\"file.error\">error: {{file.error}}</td>\n              <td class=\"whitespace-no-wrap\" v-else-if=\"file.success\">\n                <img width=\"25px\" src=\"@/assets/images/circle-checkmark-512.png\" alt=\"\">\n              </td>\n              <td class=\"whitespace-no-wrap\" v-else-if=\"file.active\">active</td>\n              <td class=\"whitespace-no-wrap\" v-else></td>\n\n              <td>\n                <div class=\"dropdown\">\n                  <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\">\n                    Action\n                  </button>\n                  <div class=\"dropdown-content \">\n                    <a :class=\"{'dropdown-item': true, disabled: !file.active}\" href=\"#\" @click.prevent=\"file.active ? $refs.upload.update(file, {error: 'cancel'}) : false\">Cancel</a>\n                    <a class=\"dropdown-item\" href=\"#\" v-if=\"file.active\" @click.prevent=\"$refs.upload.update(file, {active: false})\">Abort</a>\n                    <a class=\"dropdown-item\" href=\"#\" v-else-if=\"file.error && file.error !== 'compressing' && $refs.upload.features.html5\" @click.prevent=\"$refs.upload.update(file, {active: true, error: '', progress: '0.00'})\">Retry upload</a>\n                    <a :class=\"{'dropdown-item': true, disabled: file.success || file.error === 'compressing'}\" href=\"#\" v-else-if=\"!file.success\" @click.prevent=\"file.success || file.error === 'compressing' ? false : $refs.upload.update(file, {active: true}) \">Upload</a>\n                    <div class=\"dropdown-divider\"></div>\n                    <a class=\"dropdown-item\" href=\"#\" @click.prevent=\"$refs.upload.remove(file)\">Remove</a>\n                  </div>\n                </div>\n              </td>\n            </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- name=\"main-grey-background\"  -->\n\n    <div>\n      <!-- :put-action=\"putAction\" -->\n      <file-upload\n        :name=\"name\"\n        :post-action=\"postAction\"\n        :extensions=\"extensions\"\n        :accept=\"accept\"\n        :multiple=\"multiple\"\n        :directory=\"directory\"\n        :size=\"size || 0\"\n        :thread=\"thread < 1 ? 1 : (thread > 10 ? 10 : thread)\"\n        :headers=\"headers\"\n        :data=\"data\"\n        :drop=\"drop\"\n        :drop-directory=\"dropDirectory\"\n        :add-index=\"addIndex\"\n        v-model=\"files\"\n        @input-filter=\"inputFilter\"\n        @input-file=\"inputFile\"\n        ref=\"upload\">\n          <div v-show=\"!filesAvailable\" class=\"btn btn-primary dropdown-toggle cursor-pointer\" >\n            <i class=\"fa fa-plus\"></i>\n            Select\n          </div>\n        </file-upload>\n    </div>\n\n    <transition\n      name=\"main-grey-background\"\n      enter-class=\"animated bounceInUp\"\n      enter-active-class=\"animated bounceInUp\"\n      enter-to-class=\"animated bounceInUp\"\n    >\n      <div v-show=\"filesAvailable\" :class=\"greyMainBackground\" class=\"main-bottom-container\">\n        <div v-show=\"showStartUpoadButton || showStartAllOver || showStopUpoadButton\" class=\"relative w-1/6\">\n          <transition-group name=\"action-buttons\" >\n            <button\n              :key=\"1\"\n              type=\"button\"\n              class=\"relative btn block w-32 h-6 m-1\"\n              v-show=\"\n              ( showStartUpoadButton || enableResendUpload )\n              && (!$refs.upload || !$refs.upload.active)\n              && ( this.ongoingServerPollTimestamp && this.reportedJobs.indexOf(this.ongoingServerPollTimestamp) )\n              \"\n              @click.prevent=\"doUpload\"\n            >\n              <!-- <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i> -->\n              {{ allUploadsCompleted ? 'Re-Upload All' : 'Upload All' }}\n\n            </button>\n\n            <button\n              :key=\"2\" type=\"button\"\n              class=\"relative btn block w-32 h-6 m-1\"\n              v-show=\" showStartAllOver && ( $refs.upload && $refs.upload.uploaded ) \"\n              @click.prevent=\"startAllOver\"\n            >\n              <!-- <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i> -->\n              Start All Over\n            </button>\n\n            <button\n              :key=\"3\" type=\"button\"\n              class=\"relative btn button block w-32 h-6 m-1\"\n              v-show=\"showStopUpoadButton && ($refs.upload && $refs.upload.active) \"\n              @click.prevent=\"stopUploads\"\n            >\n              <!-- <i class=\"fa fa-stop\" aria-hidden=\"true\"></i> -->\n\n              Stop Upload\n            </button>\n          </transition-group>\n\n        </div>\n\n\n        <transition>\n          <div v-if=\"showGreenWorkingBackground\" :class=\"greenWorkingBackground\" class='animateAll green-working-background'>\n            <!-- <div class=\"inline\">\n              <div class=\"lds-roller h-4\">\n                <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\n              </div>\n            </div> -->\n              <transition>\n                <img v-if=\"displayLoadingImage\" class=\"inline self-center\" width=\"70px\" src=\"@/assets/images/loader.svg\">\n              </transition>\n\n            <div :class=\"main_holdin_container\" class=\"animateAll self-center\">\n\n              <transition mode=\"in-out\" appear>\n                <div class=\"progress_text_holder\" :class=\"current_progress_text_class\">\n                    <span\n                      :class=\"current_spanprogresstext_class\"\n                      class=\"progress_text\"\n                      v-show=\"true\"\n                      key=\"serverStatusText\"\n                      v-html=\"serverStatusText\"\n                    >\n                    </span>\n                </div>\n              </transition>\n\n              <div  class=\"relative w-full flex main-progress-area-holder flex-col\">\n\n                <transition>\n                  <div v-if=\"showPercentageCompletion\" class=\"animateAll mt-16 w-full h-full pin-x self-center text-center absolute font-sans font-bold text-3xl\" >\n                    {{markingPercentageProgress}}%\n                  </div>\n                </transition>\n\n                <div v-if=\"showProgressHolder\" :class=\"current_progress_control_container_class\">\n                  <div :class=\"morphable_LoadingClass\" class=\"-ml-12 self-center absolute circle-loader\">\n                    <div v-if=\"showCompletionCheckmark\" class=\"checkmark draw\"></div>\n                  </div>\n                </div>\n\n                <div v-if=\"showQuotes\" class=\"h-auto relative flex text-white w-full\">\n                  <quotes :webserver_url=\"webserver_url\"></quotes>\n                </div>\n\n                <div class=\"self-center report relative\" v-if=\"showFinalStatus\">\n                  <div>\n                    Total scripts marked: <span class=\"label m-1 inline-block\">124</span>\n                  </div>\n                  <div>\n                    Total units used: <span class=\"label m-1 inline-block\">103</span>\n                  </div>\n                  <div>\n                    Total units left: <span class=\"label m-1 inline-block\">433</span>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n\n          </div>\n        </transition>\n\n      </div>\n    </transition>\n  </div>\n</template>\n\n<style type=\"text/css\">\n  /*\n  //loader img disappears\n  //the light green background enlarges to fill the screen\n  //red colored progress stuff becomes the progress bar\n  //quotes appear underneath the progressbar\n  //center of progressbar shows percentage completion\n  //at anytime that error occurs along the way, clear evrrything and use Swal to handle it\n  */\n</style>\n\n<script>\nimport Quotes from '../components/Quotes.vue'\nimport Vue from 'vue'\nimport FileUpload from 'vue-upload-component'\n\nVue.filter('formatSize', function (size) {\n  if (size > 1024 * 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024 / 1024).toFixed(2) + ' TB'\n  } else if (size > 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024).toFixed(2) + ' GB'\n  } else if (size > 1024 * 1024) {\n    return (size / 1024 / 1024).toFixed(2) + ' MB'\n  } else if (size > 1024) {\n    return (size / 1024).toFixed(2) + ' KB'\n  }\n  return size.toString() + ' B'\n})\n\nexport default {\n  components: {\n    FileUpload,\n    Quotes\n  },\n  props:[\n    'showStartUpoadButton',\n    'showStartAllOver',\n    'showStopUpoadButton',\n    'startMarking',\n    'serverStatusText',\n    'current_progress_control_container_class',\n    'current_bottom_main_grey_background_class',\n    'current_bottom_green_background_class',\n    'current_progress_text_class',\n    'current_spanprogresstext_class',\n    'main_holdin_container',\n    'showProgressHolder',\n    'showQuotes'\n  ],\n  data() {\n    return {\n      files: [],\n      filesAvailable: false,\n      quotes:[],\n      show_quote: true,\n      accept: 'image/png,image/gif,image/jpeg',\n      extensions: 'jpg,jpeg,png',\n      // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],\n      // extensions: /\\.(gif|jpe?g|png|webp)$/i,\n\n      // var full = location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '');\n      // xhr.url=\"http://localhost/git-collaborations/tcexam/admin/code/tce_quotes.php\";\n      webserver_url: location.protocol+'//'+location.hostname,\n      minSize: 1024,\n      size: 1024 * 1024 * 50,\n      multiple: true,\n      computationOngoin:false,\n      directory: false,\n      drop: true,\n      dropDirectory: true,\n      addIndex: false,\n      thread: 10,\n      name: 'omrfile',\n      server_script_path: 'git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php',\n      status_upgrade_script_path: 'git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor_status.php',\n      // putAction: '/upload/put',\n      headers: {\n        // 'X-Csrf-Token': 'xxxx',\n      },\n      data: {\n        'job_id': this.ongoingServerPollTimestamp,\n        total_number_files: this.files ? this.files.length : 0,\n        error:'true'\n      },\n      autoCompress: 1024 * 1024,\n      uploadAuto: false,\n      isOption: false,\n      addData: {\n        show: false,\n        name: '',\n        type: '',\n        content: '',\n      },\n      editFile: {\n        show: false,\n        name: '',\n      },\n\n      lasyYScroll: undefined,\n      ongoingServerPollTimestamp: undefined,\n      currentMarkingSessionAbortedWithError: false,\n      reportedJobs: [],\n      intervalQueryStatus: 7000,\n\n      /******** C O N D I T I O N A L    D I S P L A Y S ********/\n\n      showUploadUI: true,\n      displayLoadingImage: true,\n      showLoadingMode: false,\n      showPercentageCompletion: false,\n      showCompletionCheckmark: false,\n      showFinalStatus: false,\n      showGreenWorkingBackground: false,\n\n      isMounted: false,\n      markingPercentageProgress: 1,\n\n\n      /******** C S S    C L A S S E S ********/\n\n      current_working_backround_class: {}\n\n      /******** C S S    C L A S S E S ********/\n\n    }\n  },\n  mounted:function(){\n    let that = this;\n    this.$nextTick(function(){\n      this.ongoingServerPollTimestamp = new Date().getTime();\n      this.isMounted = true;\n    });\n  },\n  computed:{\n    enableResendUpload: function(){\n      //after compelted mrking successfully, we need tihis to allow be able to do another makring\n      return this.files && this.files.length > 0;\n    },\n    postAction: function(){\n      return `${this.webserver_url}/git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php`;\n    },\n    allUploadsCompleted:function(){\n      if(this.isMounted){\n        return (this.$refs.upload && this.$refs.upload.uploaded && this.files.length > 0);\n      }\n    },\n    isCurrentlyUploading:function(){\n      if(this.isMounted){\n        return this.$refs.upload.active;\n      }\n    },\n    morphable_LoadingClass:function(){\n      this.showCompletionCheckmark = !this.showLoadingMode;\n      this.showPercentageCompletion = this.showLoadingMode;\n      if( this.showLoadingMode ){\n        return { \"load-complete\" : false }\n      }else{\n        return { \"load-complete\" : true }\n      }\n    },\n    greenWorkingBackground:function(){\n      return this.current_bottom_green_background_class;\n    },\n    greyMainBackground:function(){\n      return this.current_bottom_main_grey_background_class;\n    },\n    uploadCompleted:function(){\n\n      //try optimize for when multiple progress reports will be updating\n      if(this.computationOngoin){\n        return;\n      }\n\n      this.computationOngoin = true;\n\n      let complete = 0;\n      for (var i = this.files.length - 1; i >= 0; i--) {\n        let prog = Number(this.files[i].progress);\n        complete += (prog == 100) ? 1 : 0;\n\n        //retry it if it stopped uploading\n        //we are checking preence of xhr because that is what confirms that\n        //there was a failed attempt to upload the file (conf. completely\n        //unattempted file e.g. when file rejected coz extension is part of\n        //blacklisted)\n        if(prog<100 && this.files[i].xhr && !this.files[i].xhr.readyState==4){\n          //automatically retry upload\n          this.$refs.update(this.files[i], {active: true, error: '', progress: '0.00'});\n        }\n      }\n\n      this.computationOngoin = false;\n      return complete == this.files.length;\n    }\n  },\n  watch: {\n    allUploadsCompleted:function(currVal,oldval){\n      if(currVal){\n        this.sendServerUploadsCompletedMessage();//so server can set some specific error meesaages if need be\n        //notify users if there are erroneous fils too\n        for (var i = this.files.length - 1; i >= 0; i--) {\n          if(this.files[i].error){\n            //empty server status text so to thr green background is not renderes (watchers!)\n            this.currentMarkingSessionAbortedWithError= true;\n            this.$emit('serverStatusText', null);\n            this.$emit('alert', 'You have file(s) with error. Please check the files you added for marking and try again' , 1 );\n            return;\n          }\n        }\n      }\n    },\n    'addData.show'(show) {\n      if (show) {\n        this.addData.name = ''\n        this.addData.type = ''\n        this.addData.content = ''\n      }\n    },\n    startMarking: function(){\n      this.doUITransitionToStartMarking();\n    },\n    files: function(){\n      this.$emit('files_change' , this.files );\n      this.filesAvailable = this.files && (this.files.length > 0);\n      this.showOrHideGreenWorkingBackground();\n      this.data.total_number_files = this.files ? this.files.length : 0;\n    },\n    serverStatusText: function(){\n      this.showOrHideGreenWorkingBackground();\n    },\n    ongoingServerPollTimestamp:function(){\n      this.data.job_id = this.ongoingServerPollTimestamp\n    },\n\n    'isCurrentlyUploading': function( new_val , old_val ){\n      if( new_val ) {\n        //don't redo if there is an ongoing polling\n        if(!!this.ongoingServerPollTimestamp == false) {\n          this.ongoingServerPollTimestamp = new Date().getTime();\n          this.start_polling_server_for_status_updates();\n        }\n      }else{\n\n        //ensure not to trigger on first vm mount - nothing is there to poll sever for yet\n        if((this.$refs.upload && this.$refs.upload.uploaded && this.files.length > 0 ) && this.ongoingServerPollTimestamp) {\n          //do one last request, so that if race condition makes staus polling to not return anyting, there is now a single final last chance to get status for this just concluded stuff\n          this.start_polling_server_for_status_updates( null, true, Number(this.ongoingServerPollTimestamp) );\n        }\n      }\n    }\n  },\n  methods: {\n    stopUploads:function(){\n      try{\n        this.$refs.upload.active = false;\n      }catch(Ex){\n      }\n      this.$emit('serverStatusText' , \"\");\n    },\n\n    doUpload:function(){\n      //don't forget to set serverstatustext, so that the necessary ui changes will be effected (e.g. displying of the progress status text area)\n      this.currentMarkingSessionAbortedWithError= false;\n      this.displayLoadingImage = true;\n\n      if(this.allUploadsCompleted) {\n        //we are reuploading...\n        if(this.$refs.upload && this.$refs.upload.uploaded && this.files.length > 0) {\n            //make it retry\n            for (var i = this.files.length - 1; i >= 0; i--) {\n            //automatically retry upload\n            this.$refs.upload.update(this.files[i], {\n              active: true,\n              error: '',\n              success: false,\n              progress: '0.00'\n            });\n          }\n        }\n        this.$refs.upload.active = true\n        this.$emit('serverStatusText' , 'Uploading files to server...');\n      } else{\n        //ths is the very begniiing\n        this.$refs.upload.active = true\n        this.$emit('serverStatusText' , 'Uploading files to server...');\n      }\n    },\n\n    handle_server_status_message:function( message , job_id  /* , promise */ ){\n\n      //we follow this convention: starting with 'e:' means error. while startig with 's:' means it is a status meaasge\n\n      let prefix = message.substr( 0, 2 );\n      //treat according to if it is tagged or not (tagged is either s: OR e: for status message OR error message respectively) - i.e. 2nd char is ':'\n      let _mssg = message[1] == ':' ? message.substr( 2 ) :  message;\n\n      if( prefix == 's:' ) {\n        try{\n\n          let data = JSON.parse( _mssg );\n\n          if(data.marking_completed_successfully){\n            this.$emit('_markingCompletedSuccessfully');\n            this.displayLoadingImage = false;//this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n            this.ongoingServerPollTimestamp = undefined;\n          }else{\n              this.$emit('serverStatusText' , data.status_text);\n              this.markingPercentageProgress = data.percentage_progress;\n          }\n        }catch(Ex){\n          this.reportErrorAsAlertPopoup(`Error occured: ${Ex} (${_mssg})`);\n        }\n      }else{\n        this.ongoingServerPollTimestamp = undefined;\n        this.reportErrorAsAlertPopoup(_mssg);\n      }\n\n      // promise.resolve();\n    },\n\n    reportErrorAsAlertPopoup:function( _mssg ){\n      //destroy it, so that if there is any ongoing server request as at time this was set,\n      //the logic will discountence server response\n      this.ongoingServerPollTimestamp = undefined;\n      this.$emit('_showErrorThatTerminatesOngoingMarking',_mssg);\n      this.displayLoadingImage = false;//this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n    },\n\n    startAllOver: function(){\n        //means we have already uploaded some stuff. We want to redo it\n        //we need to reset stuff too\n        this.$emit('_startAllOver' , null);\n    },\n\n    showOrHideGreenWorkingBackground: function(){\n      this.showGreenWorkingBackground =\n      ( this.isCurrentlyUploading )\n      ||\n      ( ( this.serverStatusText != undefined ) && ( this.serverStatusText.length > 0 ) );\n\n      // if(showGreenWorkingBackground){\n      //   this.current_bottom_green_background_class = this.parent.data.;\n      // }\n    },\n\n    inputFilter(newFile, oldFile, prevent) {\n      if (newFile && !oldFile) {\n        // Before adding a file\n        // 添加文件前\n        // Filter system files or hide files\n        // 过滤系统文件 和隐藏文件\n        if (/(\\/|^)(Thumbs\\.db|desktop\\.ini|\\..+)$/.test(newFile.name)) {\n          return prevent()\n        }\n      }\n      if (newFile && (!oldFile || newFile.file !== oldFile.file)) {\n        // Create a blob field\n        // 创建 blob 字段\n        newFile.blob = ''\n        let URL = window.URL || window.webkitURL\n        if (URL && URL.createObjectURL) {\n          newFile.blob = URL.createObjectURL(newFile.file)\n        }\n        // Thumbnails\n        // 缩略图\n        newFile.thumb = ''\n        if (newFile.blob && newFile.type.substr(0, 6) === 'image/') {\n          newFile.thumb = newFile.blob\n        }\n      }\n    },\n    // add, update, remove File Event\n    inputFile(newFile, oldFile) {\n\n      //this happens if we are doing another round of marking after the firs tone successful\n      if(!!this.ongoingServerPollTimestamp == false ){\n        this.ongoingServerPollTimestamp = new Date().getTime();\n      }\n\n      if( newFile && (oldFile == undefined )) {\n        this.data.total_number_files = this.files ? this.files.length : 0;\n        let newData = this.data;\n        this.$refs.upload.update( newFile, { data: newData } )\n      }\n\n      if (newFile && oldFile) {\n        // update\n        if (newFile.active && !oldFile.active) {\n          // beforeSend\n          // min size\n          if (newFile.size >= 0 && this.minSize > 0 && newFile.size < this.minSize) {\n            this.$refs.upload.update(newFile, { error: 'size' })\n          }\n        }\n        if (newFile.progress !== oldFile.progress) {\n          // progress\n          // console.log('progress:', oldFile , newFile)\n          // this.files = this.$refs.files;\n          if (Number(newFile.progress) == 100) {\n            // console.log(newFile.xhr);\n          }\n        }\n        if (newFile.error && !oldFile.error) {\n          // error\n        }\n        if (newFile.success && !oldFile.success) {\n          // success\n        }\n\n        if (newFile && oldFile && !newFile.active && oldFile.active) {\n          // Get response data\n          if (newFile.xhr && newFile.response) {\n            if(newFile.response.indexOf(\"will start marking\") >= 0) {\n              //signal that server is waiting for go-ahead command to commence marking\n              if( this.ongoingServerPollTimestamp && this.reportedJobs.indexOf(this.ongoingServerPollTimestamp) == -1 ) {\n                this.reportedJobs.push(this.ongoingServerPollTimestamp)\n                this.$emit('_allUploadsCompleted')\n                this.sendServerCommand('startProessingUploadedScripts')\n                console.log(\"server now commanded\")\n              } else {\n                // no ongoing jobs or job already submitted\n              }\n            } else {\n              if(newFile.response.indexOf(\"expecting more data\") >= 0){\n                //server is still expecting more files\n              } else {\n                var temp = document.createElement(\"div\");\n                temp.innerHTML = newFile.response;\n                console.error(\"Error: \", temp.textContent || temp.innerText || \"\")\n              }\n            }\n          }\n        }\n\n        var _node_ = document.getElementById(newFile.id);\n        if(_node_){\n          _node_.scrollIntoView();\n        }\n      }\n\n      if (!newFile && oldFile) {\n        if (oldFile.response) {\n          // console.log('response: ' + oldFile.response)\n          // console.log( oldFile.xhr );\n        }\n        // remove\n        if (oldFile.success && oldFile.response.id) {\n          // $.ajax({\n          //   type: 'DELETE',\n          //   url: '/upload/delete?id=' + oldFile.response.id,\n          // })\n        }\n      }\n      // Automatically activate upload\n      if (Boolean(newFile) !== Boolean(oldFile) || oldFile.error !== newFile.error) {\n        if (this.uploadAuto && !this.$refs.upload.active) {\n          this.$refs.upload.active = true\n        }\n      }\n    },\n\n    doUITransitionToStartMarking:function(){\n      /*\n      //loader img disappears\n      //the light green background enlarges to fill the screen\n      //red colored progress stuff becomes the progress bar\n      //quotes appear underneath the progressbar\n      //center of progressbar shows percentage completion\n      //at anytime that error occurs along the way, clear evrrything and use Swal to handle it\n      */\n     this.$parent.doUITransition(\"All Uploads Successful\");\n    },\n\n    get_quotes_from_db:function(){\n      var vm = this;\n      var xhr = new XMLHttpRequest();\n      xhr.url=`${this.webserver_url}/git-collaborations/tcexam/admin/code/tce_quotes.php\"`;\n      xhr.open(\"GET\", xhr.url, true);\n      xhr.retry = 1;\n\n      //Send the proper header information along with the request\n      // xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.onreadystatechange = function() {//Call a function when the state changes.\n          if(xhr.readyState == 4) {\n              if(xhr.status == 200) {\n                // Request finished. Do processing here.\n                // console.log(xhr.responseText);\n                //eslint-disable-next-line\n                try{\n                  var quotes = [...JSON.parse( xhr.responseText ) ]\n                  vm.quotes.splice( 0, 0, quotes );\n                }\n                catch(Ex){\n                  console.log(Ex);\n                  console.log(xhr);\n                }\n              } else {\n                console.log(xhr);\n                console.log(xhr.status);\n                //redo the request\n                this.retry++;\n                if( this.retry < 10 ){\n                  this.open(\"GET\", xhr.url, true);\n                  this.send();\n                }\n              }\n          }else{\n                //redo the request\n                //Value State Description\n              // 0 UNSENT  Client has been created. open() not called yet.\n              // 1 OPENED  open() has been called.\n              // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n              // 3 LOADING Downloading; responseText holds partial data.\n              // 4 DONE  The operation is complete.\n          }\n      }\n\n      xhr.send(\"foo=bar&lorem=ipsum\");\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n\n    start_polling_server_for_status_updates: function( xhr = null , isFinalRequest = null , _ongoingServerPollTimestamp = null ){\n      var vm = this;\n      if( xhr == null ) {\n        xhr = new XMLHttpRequest();\n        xhr.url=`${this.webserver_url}/${this.status_upgrade_script_path}`;\n        // xhr.url=`${this.webserver_url}/${this.status_upgrade_script_path}?getStatus=true&job_id=${this.ongoingServerPollTimestamp}`;\n        xhr.retry = 1;\n        xhr.ongoingServerPollTimestamp = this.ongoingServerPollTimestamp;\n        xhr.isFinalRequest = isFinalRequest;\n      }\n\n      xhr.onreadystatechange = function() {//Call a function when the state changes.\n          if(xhr.readyState == 4) {\n              if(xhr.status == 200) {\n\n                // Request finished. Do processing here.\n                try {\n\n                      if(vm.currentMarkingSessionAbortedWithError){\n                        return;\n                      }\n\n                      //when undefned, it means some request came back before this status update and there is no new request (which would have set the undefined to the new jobid)\n                      //so we only need to discontence this one if and only if there is actually a new, valid, marking going on (i.e. ongoingServerPollTimestamp is set to another valid jobid intwger)\n                      if( (xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp) || !!vm.ongoingServerPollTimestamp == false ) {\n\n                        //emptiness means non of the other file upload requests has had the chance to write to the db while this one is making his own request\n                        if(xhr.responseText.length > 1){\n                          vm.handle_server_status_message(xhr.responseText , xhr.ongoingServerPollTimestamp);\n                        }\n\n                        //we only need to resend if we are still the regigning job in town!\n                        //prevent sending when they are both undefined (as in isFInalRequest)\n                        if( xhr.ongoingServerPollTimestamp && (xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp) ){\n                          setTimeout( function() {\n                              vm.start_polling_server_for_status_updates( xhr )\n                          } , vm.intervalQueryStatus )\n                        }\n                      }else{\n                        if(isFinalRequest){\n                          vm.handle_server_status_message(xhr.responseText , xhr.ongoingServerPollTimestamp);\n                        }\n                    }\n                }\n                catch(Ex){\n                  console.log(Ex);\n                  console.log(xhr);\n                }\n\n              } else {\n                console.log(xhr);\n                console.log(xhr.status);\n                //redo the request\n                this.retry++;\n                if( this.retry < 3 ){\n                  if( xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp ){\n                    vm.start_polling_server_for_status_updates( xhr )\n                  }\n                }\n              }\n          }else{\n                //redo the request\n                //Value State Description\n              // 0 UNSENT  Client has been created. open() not called yet.\n              // 1 OPENED  open() has been called.\n              // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n              // 3 LOADING Downloading; responseText holds partial data.\n              // 4 DONE  The operation is complete.\n          }\n      }\n\n      xhr.open(\"POST\", xhr.url, true);\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(`getStatus=true&job_id=${_ongoingServerPollTimestamp ? _ongoingServerPollTimestamp : this.ongoingServerPollTimestamp}&isFinalRequest=${!!isFinalRequest}`);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n    },\n\n    sendServerUploadsCompletedMessage: function( xhr = null ){\n\n      var vm = this;\n      if( xhr == null ){\n        xhr = new XMLHttpRequest();\n        xhr.url=`${this.webserver_url}/${this.server_script_path}`;\n        xhr.retry = 1;\n        xhr.sentData = `all_available_files_uploaded=true&job_id=${this.ongoingServerPollTimestamp}`;\n      }\n\n      xhr.onreadystatechange = function() {//Call a function when the state changes.\n          if(xhr.readyState == 4) {\n              if(xhr.status == 200) {\n                //we good\n              } else {\n                console.log(xhr);\n                console.log(xhr.status);\n                //redo the request\n                this.retry++;\n                if( this.retry < 10 ){\n                  vm.sendServerUploadsCompletedMessage( xhr )\n                }\n              }\n          }else{\n                //redo the request\n                //Value State Description\n              // 0 UNSENT  Client has been created. open() not called yet.\n              // 1 OPENED  open() has been called.\n              // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n              // 3 LOADING Downloading; responseText holds partial data.\n              // 4 DONE  The operation is complete.\n          }\n      }\n\n\n      xhr.open(\"POST\", xhr.url, true);\n      //Send the proper header information along with the request\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n\n    sendServerCommand: function( command , xhr = null ) {\n\n      var vm = this;\n\n      if( xhr == null ) {\n\n        var query = \"\";\n\n        switch (command) {\n          case 'startProessingUploadedScripts':\n            query = \"startProessingUploadedScripts=true&job_id=\" + this.ongoingServerPollTimestamp;\n            break;\n        }\n\n        xhr = new XMLHttpRequest();\n        xhr.url=`${this.webserver_url}/${this.server_script_path}`;\n        // xhr.sentData = `startProessingUploadedScripts=true&job_id=${Number(this.ongoingServerPollTimestamp)}`;\n        xhr.sentData = query;\n        xhr.retry = 1;\n      }\n\n      xhr.onreadystatechange = function() {//Call a function when the state changes.\n          if(xhr.readyState == 4) {\n              if(xhr.status == 200) {\n                //any errors should have been handled by the server\n              } else {\n                console.log(xhr);\n                console.log(xhr.status);\n                //redo the request\n                this.retry++;\n                if( this.retry < 10 ){\n                  vm.sendServerCommand( command , xhr )\n                }\n              }\n          }else{\n                //redo the request\n                //Value State Description\n              // 0 UNSENT  Client has been created. open() not called yet.\n              // 1 OPENED  open() has been called.\n              // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n              // 3 LOADING Downloading; responseText holds partial data.\n              // 4 DONE  The operation is complete.\n          }\n      }\n\n      xhr.open(\"POST\", xhr.url, true);\n      //Send the proper header information along with the request\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n  }\n}\n</script>\n"],"sourceRoot":"src/components"}]}