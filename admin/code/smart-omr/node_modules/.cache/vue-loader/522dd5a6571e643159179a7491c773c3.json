{"remainingRequest":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/src/components/Uploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/src/components/Uploader.vue","mtime":1557592414914},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js","mtime":1557592134683},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/babel-loader/lib/index.js","mtime":1557592134607},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js","mtime":1557592134683},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/vue-loader/lib/index.js","mtime":1557592138674}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Quotes from \"../components/Quotes.vue\";\nimport Vue from \"vue\";\nimport FileUpload from \"vue-upload-component\";\n\nVue.filter(\"formatSize\", function(size) {\n  if (size > 1024 * 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024 / 1024).toFixed(2) + \" TB\";\n  } else if (size > 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024).toFixed(2) + \" GB\";\n  } else if (size > 1024 * 1024) {\n    return (size / 1024 / 1024).toFixed(2) + \" MB\";\n  } else if (size > 1024) {\n    return (size / 1024).toFixed(2) + \" KB\";\n  }\n  return size.toString() + \" B\";\n});\n\nexport default {\n  components: {\n    FileUpload,\n    Quotes\n  },\n  props: [\n    \"showStartUpoadButton\",\n    \"showStartAllOver\",\n    \"showStopUpoadButton\",\n    \"startMarking\",\n    \"serverStatusText\",\n    \"current_progress_control_container_class\",\n    \"current_bottom_main_grey_background_class\",\n    \"current_bottom_green_background_class\",\n    \"current_progress_text_class\",\n    \"current_spanprogresstext_class\",\n    \"main_holdin_container\",\n    \"showProgressHolder\",\n    \"showQuotes\"\n  ],\n  data() {\n    return {\n      files: [],\n      filesAvailable: false,\n      quotes: [],\n      show_quote: true,\n      accept: \"image/png,image/gif,image/jpeg\",\n      extensions: \"jpg,jpeg,png\",\n      // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],\n      // extensions: /\\.(gif|jpe?g|png|webp)$/i,\n\n      // var full = location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '');\n      // xhr.url=\"http://localhost/git-collaborations/tcexam/admin/code/tce_quotes.php\";\n      webserver_url: location.protocol + \"//\" + location.hostname,\n      server_script_path:\n        \"git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php\",\n      status_upgrade_script_path:\n        \"git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor_status.php\",\n      // putAction: '/upload/put',\n      minSize: 1024,\n      size: 1024 * 1024 * 50,\n      multiple: true,\n      computationOngoin: false,\n      directory: false,\n      drop: true,\n      dropDirectory: true,\n      addIndex: false,\n      thread: 10,\n      name: \"omrfile\",\n      headers: {\n        // 'X-Csrf-Token': 'xxxx',\n      },\n      autoCompress: 1024 * 1024,\n      uploadAuto: false,\n      isOption: false,\n      addData: {\n        show: false,\n        name: \"\",\n        type: \"\",\n        content: \"\"\n      },\n      editFile: {\n        show: false,\n        name: \"\"\n      },\n\n      lasyYScroll: undefined,\n      ongoingServerPollTimestamp: undefined,\n      currentMarkingSessionAbortedWithError: false,\n      reportedJobs: [],\n      intervalQueryStatus: 7000,\n\n      /******** C O N D I T I O N A L    D I S P L A Y S ********/\n\n      showUploadUI: true,\n      displayLoadingImage: true,\n      showLoadingMode: false,\n      showPercentageCompletion: false,\n      showCompletionCheckmark: false,\n      showFinalStatus: false,\n      showGreenWorkingBackground: false,\n      recentMarkingSessionCompletedSuccessfully: false,\n\n      isMounted: false,\n      markingPercentageProgress: 1,\n      succcessfullyCompletedMarkingSessionsCounter: 0,\n\n      commandedServerToStartMarking: false,\n\n      /******** C S S    C L A S S E S ********/\n\n      current_working_backround_class: {}\n\n      /******** C S S    C L A S S E S ********/\n    };\n  },\n  mounted: function() {\n    let that = this;\n    this.$nextTick(function() {\n      this.ongoingServerPollTimestamp = new Date().getTime();\n      this.isMounted = true;\n    });\n  },\n  computed: {\n    enableResendUpload: function() {\n      //after compelted mrking successfully, we need tihis to allow be able to do another makring\n      return this.files && this.files.length > 0;\n    },\n    succcessfullyCompletedMarkingSessions: function() {\n      if (this.$refs.upload && this.$refs.upload.uploaded) {\n        return this.succcessfullyCompletedMarkingSessionsCounter;\n      }\n    },\n    postAction: function() {\n      return `${\n        this.webserver_url\n      }/git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php`;\n    },\n    allUploadsCompleted: function() {\n      if (this.isMounted) {\n        return (\n          this.$refs.upload &&\n          this.$refs.upload.uploaded &&\n          this.files.length > 0\n        );\n      }\n    },\n    isCurrentlyUploading: function() {\n      if (this.isMounted) {\n        return this.$refs.upload.active;\n      }\n    },\n    isMarkingOngoing: function() {\n      if (this.isMounted) {\n        return (!this.$refs.upload.active) && this.commandedServerToStartMarking && (!this.currentMarkingSessionAbortedWithError);\n      }\n    },\n    morphable_LoadingClass: function() {\n      this.showCompletionCheckmark = !this.showLoadingMode;\n      this.showPercentageCompletion = this.showLoadingMode;\n      if (this.showLoadingMode) {\n        return { \"load-complete\": false };\n      } else {\n        return { \"load-complete\": true };\n      }\n    },\n    greenWorkingBackground: function() {\n      return this.current_bottom_green_background_class;\n    },\n    greyMainBackground: function() {\n      return this.current_bottom_main_grey_background_class;\n    },\n    uploadCompleted: function() {\n      //try optimize for when multiple progress reports will be updating\n      if (this.computationOngoin) {\n        return;\n      }\n\n      this.computationOngoin = true;\n\n      let complete = 0;\n      for (var i = this.files.length - 1; i >= 0; i--) {\n        let prog = Number(this.files[i].progress);\n        complete += prog == 100 ? 1 : 0;\n\n        //retry it if it stopped uploading\n        //we are checking preence of xhr because that is what confirms that\n        //there was a failed attempt to upload the file (conf. completely\n        //unattempted file e.g. when file rejected coz extension is part of\n        //blacklisted)\n        if (\n          prog < 100 &&\n          this.files[i].xhr &&\n          !this.files[i].xhr.readyState == 4\n        ) {\n          //automatically retry upload\n          this.$refs.update(this.files[i], {\n            active: true,\n            error: \"\",\n            progress: \"0.00\"\n          });\n        }\n      }\n\n      this.computationOngoin = false;\n      return complete == this.files.length;\n    }\n  },\n  watch: {\n    allUploadsCompleted: function(currVal, oldval) {\n      if (currVal) {\n        this.sendServerUploadsCompletedMessage(); //so server can set some specific error meesaages if need be\n        //notify users if there are erroneous fils too\n        for (var i = this.files.length - 1; i >= 0; i--) {\n          if (this.files[i].error) {\n            //empty server status text so to thr green background is not renderes (watchers!)\n            this.currentMarkingSessionAbortedWithError = true;\n            this.$emit(\"serverStatusText\", null);\n            this.$emit(\n              \"alert\",\n              \"You have file(s) with error. Please check the files you added for marking and try again\",\n              1\n            );\n            return;\n          }\n        }\n      }\n    },\n    \"addData.show\"(show) {\n      if (show) {\n        this.addData.name = \"\";\n        this.addData.type = \"\";\n        this.addData.content = \"\";\n      }\n    },\n    startMarking: function() {\n      this.doUITransitionToStartMarking();\n    },\n    files: function() {\n      this.$emit(\"files_change\", this.files);\n      this.filesAvailable = this.files && this.files.length > 0;\n      this.showOrHideGreenWorkingBackground();\n    },\n    serverStatusText: function() {\n      this.showOrHideGreenWorkingBackground();\n    },\n    isCurrentlyUploading: function(new_val, old_val) {\n      if (new_val) {\n        //don't redo if there is an ongoing polling\n        if (!!this.ongoingServerPollTimestamp == false) {\n          this.ongoingServerPollTimestamp = new Date().getTime();\n          this.start_polling_server_for_status_updates();\n        }\n      } else {\n        //ensure not to trigger on first vm mount - nothing is there to poll sever for yet\n        if (\n          this.$refs.upload &&\n          this.$refs.upload.uploaded &&\n          this.files.length > 0 &&\n          this.ongoingServerPollTimestamp\n        ) {\n          //do one last request, so that if race condition makes staus polling to not return anyting, there is now a single final last chance to get status for this just concluded stuff\n          this.start_polling_server_for_status_updates(\n            null,\n            true,\n            Number(this.ongoingServerPollTimestamp)\n          );\n        }\n      }\n    }\n  },\n  methods: {\n    stopUploads: function() {\n      try {\n        this.$refs.upload.active = false;\n      } catch (Ex) {}\n      this.$emit(\"serverStatusText\", \"\");\n    },\n\n    doUpload: function() {\n      //don't forget to set serverstatustext, so that the necessary ui changes will be effected (e.g. displying of the progress status text area)\n      this.currentMarkingSessionAbortedWithError = false;\n      this.displayLoadingImage = true;\n\n      if (this.allUploadsCompleted) {\n        //we are reuploading...\n        if (\n          this.$refs.upload &&\n          this.$refs.upload.uploaded &&\n          this.files.length > 0\n        ) {\n          //make it retry\n          for (var i = this.files.length - 1; i >= 0; i--) {\n            //automatically retry upload\n            this.$refs.upload.update(this.files[i], {\n              active: true,\n              error: \"\",\n              success: false,\n              progress: \"0.00\"\n            });\n          }\n        }\n        this.$refs.upload.active = true;\n        this.$emit(\"serverStatusText\", \"Uploading files to server...\");\n      } else {\n        //ths is the very begniiing\n        this.$refs.upload.active = true;\n        this.$emit(\"serverStatusText\", \"Uploading files to server...\");\n      }\n    },\n\n    handle_server_status_message: function(message, job_id /* , promise */) {\n      //we follow this convention: starting with 'e:' means error. while startig with 's:' means it is a status meaasge\n\n      let prefix = message.substr(0, 2);\n      //treat according to if it is tagged or not (tagged is either s: OR e: for status message OR error message respectively) - i.e. 2nd char is ':'\n      let _mssg = message[1] == \":\" ? message.substr(2) : message;\n\n      if (prefix == \"s:\") {\n        try {\n          let realmssg = JSON.parse(_mssg);\n\n          if (realmssg.marking_completed_successfully) {\n            this.$emit(\"_markingCompletedSuccessfully\");\n            this.displayLoadingImage = false; //this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n            this.ongoingServerPollTimestamp = undefined;\n          } else {\n            this.$emit(\"serverStatusText\", realmssg.status_text);\n            this.markingPercentageProgress = realmssg.percentage_progress;\n          }\n        } catch (Ex) {\n          this.reportErrorAsAlertPopoup(`Error occured: ${Ex} (${_mssg})`);\n        }\n      } else {\n        this.ongoingServerPollTimestamp = undefined;\n        this.reportErrorAsAlertPopoup(_mssg);\n      }\n\n      // promise.resolve();\n    },\n\n    reportErrorAsAlertPopoup: function(_mssg) {\n      //destroy it, so that if there is any ongoing server request as at time this was set,\n      //the logic will discountence server response\n      this.ongoingServerPollTimestamp = undefined;\n      this.currentMarkingSessionAbortedWithError = true;\n      this.commandedServerToStartMarking = false;\n      this.$emit(\"_showErrorThatTerminatesOngoingMarking\", _mssg);\n      this.displayLoadingImage = false; //this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n    },\n\n    startAllOver: function() {\n      //means we have already uploaded some stuff. We want to redo it\n      //we need to reset stuff too\n      this.$emit(\"_startAllOver\", null);\n    },\n\n    showOrHideGreenWorkingBackground: function() {\n      this.showGreenWorkingBackground =\n        this.isCurrentlyUploading ||\n        (this.serverStatusText != undefined &&\n          this.serverStatusText.length > 0);\n\n      if(this.showGreenWorkingBackground){\n        // console.log(\"should now show greeny back\")\n        // this.current_bottom_green_background_class = this.parent.data.;\n      }\n    },\n\n    inputFilter(newFile, oldFile, prevent) {\n      if (newFile && !oldFile) {\n        // Before adding a file\n        // 添加文件前\n        // Filter system files or hide files\n        // 过滤系统文件 和隐藏文件\n        if (/(\\/|^)(Thumbs\\.db|desktop\\.ini|\\..+)$/.test(newFile.name)) {\n          return prevent();\n        }\n      }\n      if (newFile && (!oldFile || newFile.file !== oldFile.file)) {\n        // Create a blob field\n        // 创建 blob 字段\n        newFile.blob = \"\";\n        let URL = window.URL || window.webkitURL;\n        if (URL && URL.createObjectURL) {\n          newFile.blob = URL.createObjectURL(newFile.file);\n        }\n        // Thumbnails\n        // 缩略图\n        newFile.thumb = \"\";\n        if (newFile.blob && newFile.type.substr(0, 6) === \"image/\") {\n          newFile.thumb = newFile.blob;\n        }\n      }\n    },\n    // add, update, remove File Event\n    inputFile(newFile, oldFile) {\n      //this happens if we are doing another round of marking after the firs tone successful\n      if (!!this.ongoingServerPollTimestamp == false) {\n        this.ongoingServerPollTimestamp = new Date().getTime();\n      }\n\n      if (newFile && oldFile == undefined) {\n        let newData = {\n          job_id: this.ongoingServerPollTimestamp,\n          total_number_files: this.files ? this.files.length : 0,\n          filename: newFile.name,\n          error: \"true\"\n        };\n\n        this.$refs.upload.update(newFile, { data: newData });\n      }\n\n      if (newFile && oldFile) {\n        // update\n        if (newFile.active && !oldFile.active) {\n          // beforeSend\n          // min size\n          if (\n            newFile.size >= 0 &&\n            this.minSize > 0 &&\n            newFile.size < this.minSize\n          ) {\n            this.$refs.upload.update(newFile, { error: \"size\" });\n          }\n        }\n        if (newFile.progress !== oldFile.progress) {\n          // progress\n          // console.log('progress:', oldFile , newFile)\n          // this.files = this.$refs.files;\n          if (Number(newFile.progress) == 100) {\n            // console.log(newFile.xhr);\n          }\n        }\n        if (newFile.error && !oldFile.error) {\n          // error\n        }\n        if (newFile.success && !oldFile.success) {\n          // success\n        }\n\n        if (newFile && oldFile && !newFile.active && oldFile.active) {\n          // Get response data\n          if (newFile.xhr && newFile.response) {\n            if (newFile.response.indexOf(\"will start marking\") >= 0) {\n              //signal that server is waiting for go-ahead command to commence marking\n              if (\n                this.ongoingServerPollTimestamp &&\n                this.reportedJobs.indexOf(this.ongoingServerPollTimestamp) == -1\n              ) {\n                this.reportedJobs.push(this.ongoingServerPollTimestamp);\n                this.commandedServerToStartMarking = true;\n                this.$emit(\"_allUploadsCompleted\");\n                this.sendServerCommand(\"startProessingUploadedScripts\");\n                console.log(\"server now commanded\");\n              } else {\n                // no ongoing jobs or job already submitted\n              }\n            } else {\n              if (newFile.response.indexOf(\"expecting more data\") >= 0) {\n                //server is still expecting more files\n              } else {\n                var temp = document.createElement(\"div\");\n                temp.innerHTML = newFile.response;\n                if (newFile.response.indexOf(\"concurrent marking session prevented\") == -1 ) {\n                  console.error(\n                    \"Error: \",\n                    temp.textContent || temp.innerText || \"\",\n                    newFile.xhr\n                  );\n                }\n              }\n            }\n          }\n        }\n\n        var _node_ = document.getElementById(newFile.id);\n        if (_node_) {\n          _node_.scrollIntoView();\n        }\n      }\n\n      if (!newFile && oldFile) {\n        if (oldFile.response) {\n          // console.log('response: ' + oldFile.response)\n          // console.log( oldFile.xhr );\n        }\n        // remove\n        if (oldFile.success && oldFile.response.id) {\n          // $.ajax({\n          //   type: 'DELETE',\n          //   url: '/upload/delete?id=' + oldFile.response.id,\n          // })\n        }\n      }\n      // Automatically activate upload\n      if (\n        Boolean(newFile) !== Boolean(oldFile) ||\n        oldFile.error !== newFile.error\n      ) {\n        if (this.uploadAuto && !this.$refs.upload.active) {\n          this.$refs.upload.active = true;\n        }\n      }\n    },\n\n    doUITransitionToStartMarking: function() {\n      /*\n      //loader img disappears\n      //the light green background enlarges to fill the screen\n      //red colored progress stuff becomes the progress bar\n      //quotes appear underneath the progressbar\n      //center of progressbar shows percentage completion\n      //at anytime that error occurs along the way, clear evrrything and use Swal to handle it\n      */\n      this.$parent.doUITransition(\"All Uploads Successful\");\n    },\n\n    get_quotes_from_db: function() {\n      var vm = this;\n      var xhr = new XMLHttpRequest();\n      xhr.url = `${\n        this.webserver_url\n      }/git-collaborations/tcexam/admin/code/tce_quotes.php\"`;\n      xhr.open(\"GET\", xhr.url, true);\n      xhr.retry = 1;\n\n      //Send the proper header information along with the request\n      // xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            // Request finished. Do processing here.\n            // console.log(xhr.responseText);\n            //eslint-disable-next-line\n            try {\n              var quotes = [...JSON.parse(xhr.responseText)];\n              vm.quotes.splice(0, 0, quotes);\n            } catch (Ex) {\n              console.log(Ex);\n              console.log(xhr);\n            }\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 10) {\n              this.open(\"GET\", xhr.url, true);\n              this.send();\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.send(\"foo=bar&lorem=ipsum\");\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n\n    start_polling_server_for_status_updates: function(\n      xhr = null,\n      isFinalRequest = null,\n      _ongoingServerPollTimestamp = null\n    ) {\n      var vm = this;\n      if (xhr == null) {\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/${this.status_upgrade_script_path}`;\n        // xhr.url=`${this.webserver_url}/${this.status_upgrade_script_path}?getStatus=true&job_id=${this.ongoingServerPollTimestamp}`;\n        xhr.retry = 1;\n        xhr.ongoingServerPollTimestamp = this.ongoingServerPollTimestamp;\n        xhr.isFinalRequest = isFinalRequest;\n      }\n\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            // Request finished. Do processing here.\n            try {\n              if (vm.currentMarkingSessionAbortedWithError) {\n                return;\n              }\n\n              //when undefned, it means some request came back before this status update and there is no new request (which would have set the undefined to the new jobid)\n              //so we only need to discontence this one if and only if there is actually a new, valid, marking going on (i.e. ongoingServerPollTimestamp is set to another valid jobid intwger)\n              if (\n                xhr.ongoingServerPollTimestamp ==\n                  vm.ongoingServerPollTimestamp ||\n                !!vm.ongoingServerPollTimestamp == false\n              ) {\n                //emptiness means non of the other file upload requests has had the chance to write to the db while this one is making his own request\n                if (xhr.responseText.length > 1) {\n                  vm.handle_server_status_message(\n                    xhr.responseText,\n                    xhr.ongoingServerPollTimestamp\n                  );\n                }\n\n                //we only need to resend if we are still the regigning job in town!\n                //prevent sending when they are both undefined (as in isFInalRequest)\n                if (\n                  xhr.ongoingServerPollTimestamp &&\n                  xhr.ongoingServerPollTimestamp ==\n                    vm.ongoingServerPollTimestamp\n                ) {\n                  setTimeout(function() {\n                    vm.start_polling_server_for_status_updates(xhr);\n                  }, vm.intervalQueryStatus);\n                }\n              } else {\n                if (isFinalRequest) {\n                  vm.handle_server_status_message(\n                    xhr.responseText,\n                    xhr.ongoingServerPollTimestamp\n                  );\n                }\n              }\n            } catch (Ex) {\n              console.log(Ex);\n              console.log(xhr);\n            }\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 3) {\n              if (\n                xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp\n              ) {\n                vm.start_polling_server_for_status_updates(xhr);\n              }\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(\n        `getStatus=true&job_id=${\n          _ongoingServerPollTimestamp\n            ? _ongoingServerPollTimestamp\n            : this.ongoingServerPollTimestamp\n        }&isFinalRequest=${!!isFinalRequest}`\n      );\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n    },\n\n    sendServerUploadsCompletedMessage: function(xhr = null) {\n      var vm = this;\n      if (xhr == null) {\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/${this.server_script_path}`;\n        xhr.retry = 1;\n        xhr.sentData = `all_available_files_uploaded=true&job_id=${\n          this.ongoingServerPollTimestamp\n        }`;\n      }\n\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            //we good\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 10) {\n              vm.sendServerUploadsCompletedMessage(xhr);\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      //Send the proper header information along with the request\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n\n    sendServerCommand: function(command, xhr = null) {\n      var vm = this;\n\n      if (xhr == null) {\n        var query = \"\";\n        let addendum = \"\";\n\n        switch (command) {\n          case \"startProessingUploadedScripts\":\n            query =\n              \"startProessingUploadedScripts=true&job_id=\" +\n              this.ongoingServerPollTimestamp;\n            addendum = \"?startmarking=true\";\n            break;\n        }\n\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/${this.server_script_path}${addendum}`;\n        // xhr.sentData = `startProessingUploadedScripts=true&job_id=${Number(this.ongoingServerPollTimestamp)}`;\n        xhr.sentData = query;\n        xhr.retry = 1;\n      }\n\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            //any errors should have been handled by the server\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 10) {\n              vm.sendServerCommand(command, xhr);\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      //Send the proper header information along with the request\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    }\n  }\n};\n",{"version":3,"sources":["Uploader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Uploader.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"upload\" v-show=\"!isOption\">\n    <div class=\"absolute w-full h-full\">\n      <div v-if=\"showUploadUI && !files.length\">\n        <div class=\"dropbox text-center absolute p-5 w-full h-full\">\n          <h4>Drop folder to upload...</h4>\n          <!-- <br/>\n            OR\n            <br/>\n          <label for=\"omrfile\" class=\"btn btn-lg btn-primary\">Select Files</label>-->\n          <div v-show=\"$refs.upload && $refs.upload.dropActive\" class=\"drop-active mt-5\">\n            <h3 class=\"font-sans\">Drop folder to upload</h3>\n          </div>\n        </div>\n      </div>\n\n      <table\n        class=\"mostly-customized-scrollbar drop-table overflow-auto h-full w-full pb-24 block absolute\"\n      >\n        <thead v-show=\"files.length\">\n          <tr class=\"bg-pink-light w-full font-sans\">\n            <th>#</th>\n            <th>Thumbnail</th>\n            <th>Name</th>\n            <th>Size</th>\n            <th>Speed</th>\n            <th>Status</th>\n            <th class=\"w-full\">Action</th>\n          </tr>\n        </thead>\n        <tbody class>\n          <tr\n            v-for=\"(file, index) in files\"\n            :key=\"file.id\"\n            class=\"font-mono text-sm hover:bg-blue-lighter cursor-pointer\"\n            :class=\"{'bg-red-light': file.error && file.error!='denied'}\"\n          >\n            <td>{{index+1}}</td>\n            <td class=\"whitespace-no-wrap\">\n              <img v-if=\"file.thumb\" :src=\"file.thumb\" width=\"40\" height=\"auto\">\n              <span v-else>No Image</span>\n            </td>\n            <td>\n              <div class=\"filename whitespace-no-wrap\">{{file.name}}</div>\n              <div :id=\"file.id\" class=\"progress\" v-if=\"file.active || file.progress !== '0.00'\">\n                <div\n                  :class=\"{'progress-bar': true, 'progress-bar-striped': true, 'bg-green': Number(file.progress) != 100 , 'bg-danger': file.error, 'progress-bar-animated': file.active}\"\n                  role=\"progressbar\"\n                  :style=\"{width: file.progress + '%'}\"\n                >{{file.progress}}%</div>\n              </div>\n            </td>\n            <td class=\"whitespace-no-wrap\">{{file.size | formatSize}}</td>\n            <td class=\"whitespace-no-wrap\">{{file.speed | formatSize}}</td>\n\n            <td class=\"whitespace-no-wrap\" v-if=\"file.error\">error: {{file.error}}</td>\n            <td class=\"whitespace-no-wrap\" v-else-if=\"file.success\">\n              <img width=\"25px\" src=\"@/assets/images/circle-checkmark-512.png\" alt>\n            </td>\n            <td class=\"whitespace-no-wrap\" v-else-if=\"file.active\">active</td>\n            <td class=\"whitespace-no-wrap\" v-else></td>\n\n            <td>\n              <div class=\"dropdown\">\n                <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\">Action</button>\n                <div class=\"dropdown-content\">\n                  <a\n                    :class=\"{'dropdown-item': true, disabled: !file.active}\"\n                    href=\"#\"\n                    @click.prevent=\"file.active ? $refs.upload.update(file, {error: 'cancel'}) : false\"\n                  >Cancel</a>\n                  <a\n                    class=\"dropdown-item\"\n                    href=\"#\"\n                    v-if=\"file.active\"\n                    @click.prevent=\"$refs.upload.update(file, {active: false})\"\n                  >Abort</a>\n                  <a\n                    class=\"dropdown-item\"\n                    href=\"#\"\n                    v-else-if=\"file.error && file.error !== 'compressing' && $refs.upload.features.html5\"\n                    @click.prevent=\"$refs.upload.update(file, {active: true, error: '', progress: '0.00'})\"\n                  >Retry upload</a>\n                  <a\n                    :class=\"{'dropdown-item': true, disabled: file.success || file.error === 'compressing'}\"\n                    href=\"#\"\n                    v-else-if=\"!file.success\"\n                    @click.prevent=\"file.success || file.error === 'compressing' ? false : $refs.upload.update(file, {active: true}) \"\n                  >Upload</a>\n                  <div class=\"dropdown-divider\"></div>\n                  <a\n                    class=\"dropdown-item\"\n                    href=\"#\"\n                    @click.prevent=\"$refs.upload.remove(file)\"\n                  >Remove</a>\n                </div>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- name=\"main-grey-background\"  -->\n\n    <div>\n      <!-- :put-action=\"putAction\" -->\n      <file-upload\n        :name=\"name\"\n        :post-action=\"postAction\"\n        :extensions=\"extensions\"\n        :accept=\"accept\"\n        :multiple=\"multiple\"\n        :directory=\"directory\"\n        :size=\"size || 0\"\n        :thread=\"thread < 1 ? 1 : (thread > 10 ? 10 : thread)\"\n        :headers=\"headers\"\n        :drop=\"drop\"\n        :drop-directory=\"dropDirectory\"\n        :add-index=\"addIndex\"\n        v-model=\"files\"\n        @input-filter=\"inputFilter\"\n        @input-file=\"inputFile\"\n        ref=\"upload\"\n      >\n        <div v-show=\"!filesAvailable\" class=\"btn btn-primary dropdown-toggle cursor-pointer\">\n          <i class=\"fa fa-plus\"></i>\n          Select\n        </div>\n      </file-upload>\n    </div>\n\n    <transition\n      name=\"main-grey-background\"\n      enter-class=\"animated bounceInUp\"\n      enter-active-class=\"animated bounceInUp\"\n      enter-to-class=\"animated bounceInUp\"\n    >\n      <div v-show=\"filesAvailable\" :class=\"greyMainBackground\" class=\"main-bottom-container\">\n        <div\n          v-show=\"showStartUpoadButton || showStartAllOver || showStopUpoadButton\"\n          class=\"relative w-1/6\"\n        >\n          <transition-group name=\"action-buttons\">\n            <button\n              :key=\"1\"\n              type=\"button\"\n              class=\"relative btn block w-32 h-6 m-1\"\n              v-show=\"\n              ( showStartUpoadButton || enableResendUpload )\n              && (!$refs.upload || !$refs.upload.active)\n              && ( this.ongoingServerPollTimestamp && this.reportedJobs.indexOf(this.ongoingServerPollTimestamp) )\n              \"\n              @click.prevent=\"doUpload\"\n            >\n              <!-- <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i> -->\n\n              {{ allUploadsCompleted ? 'Re-Upload All' : 'Upload All' }}\n            </button>\n\n            <button\n              :key=\"2\"\n              type=\"button\"\n              class=\"relative btn block w-32 h-6 m-1\"\n              v-show=\" showStartAllOver && ( $refs.upload && $refs.upload.uploaded ) \"\n              @click.prevent=\"startAllOver\"\n            >\n              <!-- <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i> -->\n              Start All Over\n            </button>\n\n            <button\n              :key=\"3\"\n              type=\"button\"\n              class=\"relative btn button block w-32 h-6 m-1\"\n              v-show=\"showStopUpoadButton && ($refs.upload && $refs.upload.active) \"\n              @click.prevent=\"stopUploads\"\n            >\n              <!-- <i class=\"fa fa-stop\" aria-hidden=\"true\"></i> -->\n              Stop Upload\n            </button>\n          </transition-group>\n        </div>\n\n        <transition>\n          <div\n            v-if=\"showGreenWorkingBackground\"\n            :class=\"greenWorkingBackground\"\n            class=\"animateAll green-working-background\"\n          >\n            <!-- <div class=\"inline\">\n              <div class=\"lds-roller h-4\">\n                <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\n              </div>\n            </div>-->\n            <transition>\n              <img\n                v-if=\"displayLoadingImage\"\n                class=\"inline self-center\"\n                width=\"70px\"\n                src=\"@/assets/images/loader.svg\"\n              >\n            </transition>\n\n            <div :class=\"main_holdin_container\" class=\"animateAll self-center\">\n              <transition mode=\"in-out\" appear>\n                <div class=\"progress_text_holder\" :class=\"current_progress_text_class\">\n                  <span\n                    :class=\"current_spanprogresstext_class\"\n                    class=\"progress_text\"\n                    v-show=\"true\"\n                    key=\"serverStatusText\"\n                    v-html=\"serverStatusText\"\n                  ></span>\n                </div>\n              </transition>\n\n              <div class=\"relative w-full flex main-progress-area-holder flex-col\">\n                <transition>\n                  <div\n                    v-if=\"showPercentageCompletion\"\n                    class=\"animateAll mt-16 w-full h-full pin-x self-center text-center absolute font-sans font-bold text-3xl\"\n                  >{{markingPercentageProgress}}%</div>\n                </transition>\n\n                <div v-if=\"showProgressHolder\" :class=\"current_progress_control_container_class\">\n                  <div\n                    :class=\"morphable_LoadingClass\"\n                    class=\"-ml-12 self-center absolute circle-loader\"\n                  >\n                    <div v-if=\"showCompletionCheckmark\" class=\"checkmark draw\"></div>\n                  </div>\n                </div>\n\n                <div v-if=\"showQuotes\" class=\"h-auto relative flex text-white w-full\">\n                  <quotes :webserver_url=\"webserver_url\"></quotes>\n                </div>\n\n                <div class=\"self-center report relative\" v-if=\"showFinalStatus\">\n                  <div>\n                    Total scripts marked:\n                    <span class=\"label m-1 inline-block\">124</span>\n                  </div>\n                  <div>\n                    Total units used:\n                    <span class=\"label m-1 inline-block\">103</span>\n                  </div>\n                  <div>\n                    Total units left:\n                    <span class=\"label m-1 inline-block\">433</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </transition>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<style type=\"text/css\">\n/*\n  //loader img disappears\n  //the light green background enlarges to fill the screen\n  //red colored progress stuff becomes the progress bar\n  //quotes appear underneath the progressbar\n  //center of progressbar shows percentage completion\n  //at anytime that error occurs along the way, clear evrrything and use Swal to handle it\n  */\n</style>\n\n<script>\nimport Quotes from \"../components/Quotes.vue\";\nimport Vue from \"vue\";\nimport FileUpload from \"vue-upload-component\";\n\nVue.filter(\"formatSize\", function(size) {\n  if (size > 1024 * 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024 / 1024).toFixed(2) + \" TB\";\n  } else if (size > 1024 * 1024 * 1024) {\n    return (size / 1024 / 1024 / 1024).toFixed(2) + \" GB\";\n  } else if (size > 1024 * 1024) {\n    return (size / 1024 / 1024).toFixed(2) + \" MB\";\n  } else if (size > 1024) {\n    return (size / 1024).toFixed(2) + \" KB\";\n  }\n  return size.toString() + \" B\";\n});\n\nexport default {\n  components: {\n    FileUpload,\n    Quotes\n  },\n  props: [\n    \"showStartUpoadButton\",\n    \"showStartAllOver\",\n    \"showStopUpoadButton\",\n    \"startMarking\",\n    \"serverStatusText\",\n    \"current_progress_control_container_class\",\n    \"current_bottom_main_grey_background_class\",\n    \"current_bottom_green_background_class\",\n    \"current_progress_text_class\",\n    \"current_spanprogresstext_class\",\n    \"main_holdin_container\",\n    \"showProgressHolder\",\n    \"showQuotes\"\n  ],\n  data() {\n    return {\n      files: [],\n      filesAvailable: false,\n      quotes: [],\n      show_quote: true,\n      accept: \"image/png,image/gif,image/jpeg\",\n      extensions: \"jpg,jpeg,png\",\n      // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],\n      // extensions: /\\.(gif|jpe?g|png|webp)$/i,\n\n      // var full = location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '');\n      // xhr.url=\"http://localhost/git-collaborations/tcexam/admin/code/tce_quotes.php\";\n      webserver_url: location.protocol + \"//\" + location.hostname,\n      server_script_path:\n        \"git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php\",\n      status_upgrade_script_path:\n        \"git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor_status.php\",\n      // putAction: '/upload/put',\n      minSize: 1024,\n      size: 1024 * 1024 * 50,\n      multiple: true,\n      computationOngoin: false,\n      directory: false,\n      drop: true,\n      dropDirectory: true,\n      addIndex: false,\n      thread: 10,\n      name: \"omrfile\",\n      headers: {\n        // 'X-Csrf-Token': 'xxxx',\n      },\n      autoCompress: 1024 * 1024,\n      uploadAuto: false,\n      isOption: false,\n      addData: {\n        show: false,\n        name: \"\",\n        type: \"\",\n        content: \"\"\n      },\n      editFile: {\n        show: false,\n        name: \"\"\n      },\n\n      lasyYScroll: undefined,\n      ongoingServerPollTimestamp: undefined,\n      currentMarkingSessionAbortedWithError: false,\n      reportedJobs: [],\n      intervalQueryStatus: 7000,\n\n      /******** C O N D I T I O N A L    D I S P L A Y S ********/\n\n      showUploadUI: true,\n      displayLoadingImage: true,\n      showLoadingMode: false,\n      showPercentageCompletion: false,\n      showCompletionCheckmark: false,\n      showFinalStatus: false,\n      showGreenWorkingBackground: false,\n      recentMarkingSessionCompletedSuccessfully: false,\n\n      isMounted: false,\n      markingPercentageProgress: 1,\n      succcessfullyCompletedMarkingSessionsCounter: 0,\n\n      commandedServerToStartMarking: false,\n\n      /******** C S S    C L A S S E S ********/\n\n      current_working_backround_class: {}\n\n      /******** C S S    C L A S S E S ********/\n    };\n  },\n  mounted: function() {\n    let that = this;\n    this.$nextTick(function() {\n      this.ongoingServerPollTimestamp = new Date().getTime();\n      this.isMounted = true;\n    });\n  },\n  computed: {\n    enableResendUpload: function() {\n      //after compelted mrking successfully, we need tihis to allow be able to do another makring\n      return this.files && this.files.length > 0;\n    },\n    succcessfullyCompletedMarkingSessions: function() {\n      if (this.$refs.upload && this.$refs.upload.uploaded) {\n        return this.succcessfullyCompletedMarkingSessionsCounter;\n      }\n    },\n    postAction: function() {\n      return `${\n        this.webserver_url\n      }/git-collaborations/tcexam/admin/code/tce_import_omr_answers_bulk_smart_processor.php`;\n    },\n    allUploadsCompleted: function() {\n      if (this.isMounted) {\n        return (\n          this.$refs.upload &&\n          this.$refs.upload.uploaded &&\n          this.files.length > 0\n        );\n      }\n    },\n    isCurrentlyUploading: function() {\n      if (this.isMounted) {\n        return this.$refs.upload.active;\n      }\n    },\n    isMarkingOngoing: function() {\n      if (this.isMounted) {\n        return (!this.$refs.upload.active) && this.commandedServerToStartMarking && (!this.currentMarkingSessionAbortedWithError);\n      }\n    },\n    morphable_LoadingClass: function() {\n      this.showCompletionCheckmark = !this.showLoadingMode;\n      this.showPercentageCompletion = this.showLoadingMode;\n      if (this.showLoadingMode) {\n        return { \"load-complete\": false };\n      } else {\n        return { \"load-complete\": true };\n      }\n    },\n    greenWorkingBackground: function() {\n      return this.current_bottom_green_background_class;\n    },\n    greyMainBackground: function() {\n      return this.current_bottom_main_grey_background_class;\n    },\n    uploadCompleted: function() {\n      //try optimize for when multiple progress reports will be updating\n      if (this.computationOngoin) {\n        return;\n      }\n\n      this.computationOngoin = true;\n\n      let complete = 0;\n      for (var i = this.files.length - 1; i >= 0; i--) {\n        let prog = Number(this.files[i].progress);\n        complete += prog == 100 ? 1 : 0;\n\n        //retry it if it stopped uploading\n        //we are checking preence of xhr because that is what confirms that\n        //there was a failed attempt to upload the file (conf. completely\n        //unattempted file e.g. when file rejected coz extension is part of\n        //blacklisted)\n        if (\n          prog < 100 &&\n          this.files[i].xhr &&\n          !this.files[i].xhr.readyState == 4\n        ) {\n          //automatically retry upload\n          this.$refs.update(this.files[i], {\n            active: true,\n            error: \"\",\n            progress: \"0.00\"\n          });\n        }\n      }\n\n      this.computationOngoin = false;\n      return complete == this.files.length;\n    }\n  },\n  watch: {\n    allUploadsCompleted: function(currVal, oldval) {\n      if (currVal) {\n        this.sendServerUploadsCompletedMessage(); //so server can set some specific error meesaages if need be\n        //notify users if there are erroneous fils too\n        for (var i = this.files.length - 1; i >= 0; i--) {\n          if (this.files[i].error) {\n            //empty server status text so to thr green background is not renderes (watchers!)\n            this.currentMarkingSessionAbortedWithError = true;\n            this.$emit(\"serverStatusText\", null);\n            this.$emit(\n              \"alert\",\n              \"You have file(s) with error. Please check the files you added for marking and try again\",\n              1\n            );\n            return;\n          }\n        }\n      }\n    },\n    \"addData.show\"(show) {\n      if (show) {\n        this.addData.name = \"\";\n        this.addData.type = \"\";\n        this.addData.content = \"\";\n      }\n    },\n    startMarking: function() {\n      this.doUITransitionToStartMarking();\n    },\n    files: function() {\n      this.$emit(\"files_change\", this.files);\n      this.filesAvailable = this.files && this.files.length > 0;\n      this.showOrHideGreenWorkingBackground();\n    },\n    serverStatusText: function() {\n      this.showOrHideGreenWorkingBackground();\n    },\n    isCurrentlyUploading: function(new_val, old_val) {\n      if (new_val) {\n        //don't redo if there is an ongoing polling\n        if (!!this.ongoingServerPollTimestamp == false) {\n          this.ongoingServerPollTimestamp = new Date().getTime();\n          this.start_polling_server_for_status_updates();\n        }\n      } else {\n        //ensure not to trigger on first vm mount - nothing is there to poll sever for yet\n        if (\n          this.$refs.upload &&\n          this.$refs.upload.uploaded &&\n          this.files.length > 0 &&\n          this.ongoingServerPollTimestamp\n        ) {\n          //do one last request, so that if race condition makes staus polling to not return anyting, there is now a single final last chance to get status for this just concluded stuff\n          this.start_polling_server_for_status_updates(\n            null,\n            true,\n            Number(this.ongoingServerPollTimestamp)\n          );\n        }\n      }\n    }\n  },\n  methods: {\n    stopUploads: function() {\n      try {\n        this.$refs.upload.active = false;\n      } catch (Ex) {}\n      this.$emit(\"serverStatusText\", \"\");\n    },\n\n    doUpload: function() {\n      //don't forget to set serverstatustext, so that the necessary ui changes will be effected (e.g. displying of the progress status text area)\n      this.currentMarkingSessionAbortedWithError = false;\n      this.displayLoadingImage = true;\n\n      if (this.allUploadsCompleted) {\n        //we are reuploading...\n        if (\n          this.$refs.upload &&\n          this.$refs.upload.uploaded &&\n          this.files.length > 0\n        ) {\n          //make it retry\n          for (var i = this.files.length - 1; i >= 0; i--) {\n            //automatically retry upload\n            this.$refs.upload.update(this.files[i], {\n              active: true,\n              error: \"\",\n              success: false,\n              progress: \"0.00\"\n            });\n          }\n        }\n        this.$refs.upload.active = true;\n        this.$emit(\"serverStatusText\", \"Uploading files to server...\");\n      } else {\n        //ths is the very begniiing\n        this.$refs.upload.active = true;\n        this.$emit(\"serverStatusText\", \"Uploading files to server...\");\n      }\n    },\n\n    handle_server_status_message: function(message, job_id /* , promise */) {\n      //we follow this convention: starting with 'e:' means error. while startig with 's:' means it is a status meaasge\n\n      let prefix = message.substr(0, 2);\n      //treat according to if it is tagged or not (tagged is either s: OR e: for status message OR error message respectively) - i.e. 2nd char is ':'\n      let _mssg = message[1] == \":\" ? message.substr(2) : message;\n\n      if (prefix == \"s:\") {\n        try {\n          let realmssg = JSON.parse(_mssg);\n\n          if (realmssg.marking_completed_successfully) {\n            this.$emit(\"_markingCompletedSuccessfully\");\n            this.displayLoadingImage = false; //this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n            this.ongoingServerPollTimestamp = undefined;\n          } else {\n            this.$emit(\"serverStatusText\", realmssg.status_text);\n            this.markingPercentageProgress = realmssg.percentage_progress;\n          }\n        } catch (Ex) {\n          this.reportErrorAsAlertPopoup(`Error occured: ${Ex} (${_mssg})`);\n        }\n      } else {\n        this.ongoingServerPollTimestamp = undefined;\n        this.reportErrorAsAlertPopoup(_mssg);\n      }\n\n      // promise.resolve();\n    },\n\n    reportErrorAsAlertPopoup: function(_mssg) {\n      //destroy it, so that if there is any ongoing server request as at time this was set,\n      //the logic will discountence server response\n      this.ongoingServerPollTimestamp = undefined;\n      this.currentMarkingSessionAbortedWithError = true;\n      this.commandedServerToStartMarking = false;\n      this.$emit(\"_showErrorThatTerminatesOngoingMarking\", _mssg);\n      this.displayLoadingImage = false; //this ting runs down CPU!! So stop it as soon as possible wth chances of even if its container is displayed...also ensures cleaner UI: no image unessaruly\n    },\n\n    startAllOver: function() {\n      //means we have already uploaded some stuff. We want to redo it\n      //we need to reset stuff too\n      this.$emit(\"_startAllOver\", null);\n    },\n\n    showOrHideGreenWorkingBackground: function() {\n      this.showGreenWorkingBackground =\n        this.isCurrentlyUploading ||\n        (this.serverStatusText != undefined &&\n          this.serverStatusText.length > 0);\n\n      if(this.showGreenWorkingBackground){\n        // console.log(\"should now show greeny back\")\n        // this.current_bottom_green_background_class = this.parent.data.;\n      }\n    },\n\n    inputFilter(newFile, oldFile, prevent) {\n      if (newFile && !oldFile) {\n        // Before adding a file\n        // 添加文件前\n        // Filter system files or hide files\n        // 过滤系统文件 和隐藏文件\n        if (/(\\/|^)(Thumbs\\.db|desktop\\.ini|\\..+)$/.test(newFile.name)) {\n          return prevent();\n        }\n      }\n      if (newFile && (!oldFile || newFile.file !== oldFile.file)) {\n        // Create a blob field\n        // 创建 blob 字段\n        newFile.blob = \"\";\n        let URL = window.URL || window.webkitURL;\n        if (URL && URL.createObjectURL) {\n          newFile.blob = URL.createObjectURL(newFile.file);\n        }\n        // Thumbnails\n        // 缩略图\n        newFile.thumb = \"\";\n        if (newFile.blob && newFile.type.substr(0, 6) === \"image/\") {\n          newFile.thumb = newFile.blob;\n        }\n      }\n    },\n    // add, update, remove File Event\n    inputFile(newFile, oldFile) {\n      //this happens if we are doing another round of marking after the firs tone successful\n      if (!!this.ongoingServerPollTimestamp == false) {\n        this.ongoingServerPollTimestamp = new Date().getTime();\n      }\n\n      if (newFile && oldFile == undefined) {\n        let newData = {\n          job_id: this.ongoingServerPollTimestamp,\n          total_number_files: this.files ? this.files.length : 0,\n          filename: newFile.name,\n          error: \"true\"\n        };\n\n        this.$refs.upload.update(newFile, { data: newData });\n      }\n\n      if (newFile && oldFile) {\n        // update\n        if (newFile.active && !oldFile.active) {\n          // beforeSend\n          // min size\n          if (\n            newFile.size >= 0 &&\n            this.minSize > 0 &&\n            newFile.size < this.minSize\n          ) {\n            this.$refs.upload.update(newFile, { error: \"size\" });\n          }\n        }\n        if (newFile.progress !== oldFile.progress) {\n          // progress\n          // console.log('progress:', oldFile , newFile)\n          // this.files = this.$refs.files;\n          if (Number(newFile.progress) == 100) {\n            // console.log(newFile.xhr);\n          }\n        }\n        if (newFile.error && !oldFile.error) {\n          // error\n        }\n        if (newFile.success && !oldFile.success) {\n          // success\n        }\n\n        if (newFile && oldFile && !newFile.active && oldFile.active) {\n          // Get response data\n          if (newFile.xhr && newFile.response) {\n            if (newFile.response.indexOf(\"will start marking\") >= 0) {\n              //signal that server is waiting for go-ahead command to commence marking\n              if (\n                this.ongoingServerPollTimestamp &&\n                this.reportedJobs.indexOf(this.ongoingServerPollTimestamp) == -1\n              ) {\n                this.reportedJobs.push(this.ongoingServerPollTimestamp);\n                this.commandedServerToStartMarking = true;\n                this.$emit(\"_allUploadsCompleted\");\n                this.sendServerCommand(\"startProessingUploadedScripts\");\n                console.log(\"server now commanded\");\n              } else {\n                // no ongoing jobs or job already submitted\n              }\n            } else {\n              if (newFile.response.indexOf(\"expecting more data\") >= 0) {\n                //server is still expecting more files\n              } else {\n                var temp = document.createElement(\"div\");\n                temp.innerHTML = newFile.response;\n                if (newFile.response.indexOf(\"concurrent marking session prevented\") == -1 ) {\n                  console.error(\n                    \"Error: \",\n                    temp.textContent || temp.innerText || \"\",\n                    newFile.xhr\n                  );\n                }\n              }\n            }\n          }\n        }\n\n        var _node_ = document.getElementById(newFile.id);\n        if (_node_) {\n          _node_.scrollIntoView();\n        }\n      }\n\n      if (!newFile && oldFile) {\n        if (oldFile.response) {\n          // console.log('response: ' + oldFile.response)\n          // console.log( oldFile.xhr );\n        }\n        // remove\n        if (oldFile.success && oldFile.response.id) {\n          // $.ajax({\n          //   type: 'DELETE',\n          //   url: '/upload/delete?id=' + oldFile.response.id,\n          // })\n        }\n      }\n      // Automatically activate upload\n      if (\n        Boolean(newFile) !== Boolean(oldFile) ||\n        oldFile.error !== newFile.error\n      ) {\n        if (this.uploadAuto && !this.$refs.upload.active) {\n          this.$refs.upload.active = true;\n        }\n      }\n    },\n\n    doUITransitionToStartMarking: function() {\n      /*\n      //loader img disappears\n      //the light green background enlarges to fill the screen\n      //red colored progress stuff becomes the progress bar\n      //quotes appear underneath the progressbar\n      //center of progressbar shows percentage completion\n      //at anytime that error occurs along the way, clear evrrything and use Swal to handle it\n      */\n      this.$parent.doUITransition(\"All Uploads Successful\");\n    },\n\n    get_quotes_from_db: function() {\n      var vm = this;\n      var xhr = new XMLHttpRequest();\n      xhr.url = `${\n        this.webserver_url\n      }/git-collaborations/tcexam/admin/code/tce_quotes.php\"`;\n      xhr.open(\"GET\", xhr.url, true);\n      xhr.retry = 1;\n\n      //Send the proper header information along with the request\n      // xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            // Request finished. Do processing here.\n            // console.log(xhr.responseText);\n            //eslint-disable-next-line\n            try {\n              var quotes = [...JSON.parse(xhr.responseText)];\n              vm.quotes.splice(0, 0, quotes);\n            } catch (Ex) {\n              console.log(Ex);\n              console.log(xhr);\n            }\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 10) {\n              this.open(\"GET\", xhr.url, true);\n              this.send();\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.send(\"foo=bar&lorem=ipsum\");\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n\n    start_polling_server_for_status_updates: function(\n      xhr = null,\n      isFinalRequest = null,\n      _ongoingServerPollTimestamp = null\n    ) {\n      var vm = this;\n      if (xhr == null) {\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/${this.status_upgrade_script_path}`;\n        // xhr.url=`${this.webserver_url}/${this.status_upgrade_script_path}?getStatus=true&job_id=${this.ongoingServerPollTimestamp}`;\n        xhr.retry = 1;\n        xhr.ongoingServerPollTimestamp = this.ongoingServerPollTimestamp;\n        xhr.isFinalRequest = isFinalRequest;\n      }\n\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            // Request finished. Do processing here.\n            try {\n              if (vm.currentMarkingSessionAbortedWithError) {\n                return;\n              }\n\n              //when undefned, it means some request came back before this status update and there is no new request (which would have set the undefined to the new jobid)\n              //so we only need to discontence this one if and only if there is actually a new, valid, marking going on (i.e. ongoingServerPollTimestamp is set to another valid jobid intwger)\n              if (\n                xhr.ongoingServerPollTimestamp ==\n                  vm.ongoingServerPollTimestamp ||\n                !!vm.ongoingServerPollTimestamp == false\n              ) {\n                //emptiness means non of the other file upload requests has had the chance to write to the db while this one is making his own request\n                if (xhr.responseText.length > 1) {\n                  vm.handle_server_status_message(\n                    xhr.responseText,\n                    xhr.ongoingServerPollTimestamp\n                  );\n                }\n\n                //we only need to resend if we are still the regigning job in town!\n                //prevent sending when they are both undefined (as in isFInalRequest)\n                if (\n                  xhr.ongoingServerPollTimestamp &&\n                  xhr.ongoingServerPollTimestamp ==\n                    vm.ongoingServerPollTimestamp\n                ) {\n                  setTimeout(function() {\n                    vm.start_polling_server_for_status_updates(xhr);\n                  }, vm.intervalQueryStatus);\n                }\n              } else {\n                if (isFinalRequest) {\n                  vm.handle_server_status_message(\n                    xhr.responseText,\n                    xhr.ongoingServerPollTimestamp\n                  );\n                }\n              }\n            } catch (Ex) {\n              console.log(Ex);\n              console.log(xhr);\n            }\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 3) {\n              if (\n                xhr.ongoingServerPollTimestamp == vm.ongoingServerPollTimestamp\n              ) {\n                vm.start_polling_server_for_status_updates(xhr);\n              }\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(\n        `getStatus=true&job_id=${\n          _ongoingServerPollTimestamp\n            ? _ongoingServerPollTimestamp\n            : this.ongoingServerPollTimestamp\n        }&isFinalRequest=${!!isFinalRequest}`\n      );\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n    },\n\n    sendServerUploadsCompletedMessage: function(xhr = null) {\n      var vm = this;\n      if (xhr == null) {\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/${this.server_script_path}`;\n        xhr.retry = 1;\n        xhr.sentData = `all_available_files_uploaded=true&job_id=${\n          this.ongoingServerPollTimestamp\n        }`;\n      }\n\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            //we good\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 10) {\n              vm.sendServerUploadsCompletedMessage(xhr);\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      //Send the proper header information along with the request\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    },\n\n    sendServerCommand: function(command, xhr = null) {\n      var vm = this;\n\n      if (xhr == null) {\n        var query = \"\";\n        let addendum = \"\";\n\n        switch (command) {\n          case \"startProessingUploadedScripts\":\n            query =\n              \"startProessingUploadedScripts=true&job_id=\" +\n              this.ongoingServerPollTimestamp;\n            addendum = \"?startmarking=true\";\n            break;\n        }\n\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/${this.server_script_path}${addendum}`;\n        // xhr.sentData = `startProessingUploadedScripts=true&job_id=${Number(this.ongoingServerPollTimestamp)}`;\n        xhr.sentData = query;\n        xhr.retry = 1;\n      }\n\n      xhr.onreadystatechange = function() {\n        //Call a function when the state changes.\n        if (xhr.readyState == 4) {\n          if (xhr.status == 200) {\n            //any errors should have been handled by the server\n          } else {\n            console.log(xhr);\n            console.log(xhr.status);\n            //redo the request\n            this.retry++;\n            if (this.retry < 10) {\n              vm.sendServerCommand(command, xhr);\n            }\n          }\n        } else {\n          //redo the request\n          //Value State Description\n          // 0 UNSENT  Client has been created. open() not called yet.\n          // 1 OPENED  open() has been called.\n          // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n          // 3 LOADING Downloading; responseText holds partial data.\n          // 4 DONE  The operation is complete.\n        }\n      };\n\n      xhr.open(\"POST\", xhr.url, true);\n      //Send the proper header information along with the request\n      xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.send(xhr.sentData);\n      // xhr.send('string');\n      // xhr.send(new Blob());\n      // xhr.send(new Int8Array());\n      // xhr.send({ form: 'data' });\n      // xhr.send(document);\n    }\n  }\n};\n</script>\n"]}]}