{"remainingRequest":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/src/components/Quotes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/src/components/Quotes.vue","mtime":1557592414914},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/lampp/htdocs/git-collaborations/tcexam/admin/code/smart-omr/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n  import ProgressBar from 'progressbar.js'\n\n   //get quotes from the database\n   //we will be getting 100 quotes randomly from the db\n   //we display  a quote every 7 secs\n   //at each display iteration, if quotes available is less than 20, we fetch another 100\nexport default {  \n  props: [\n      \"webserver_url\"\n  ],\n  data:function(){\n    return {\n      available_quotes:[],\n      quote: '',\n      quotes_change_interval: 7000,//in ms\n      show_quote: true,\n      quotesBarWidth: 0,\n      count: 0,\n      ongoingTimeout: 0,\n      progressbar: null\n    }\n  },\n  computed: {\n  },\n  mounted:function(){\n    this.progressbar = new ProgressBar.Circle(\"#progressbar\", {\n          strokeWidth: 9,\n          easing: 'linear',\n          duration: 1000,\n          color: 'grey',\n          trailColor: '',\n          trailWidth: 0,\n          svgStyle: null,\n          fill: null,\n          warnings: true\n        });\n  },\n  created: function () {\n      this.get_quotes_from_db();\n      this.displayNextQuote();\n  },\n  methods:{\n    displayNextQuote:function(){\n      if( this.available_quotes.length > 0 ) {\n\n        //don't allow us to run dry before refueling!!!\n        if( this.available_quotes.length < 20 ) {\n          this.get_quotes_from_db();\n        }\n\n        //a quote just compelted displaying\n        var dat = this.available_quotes.pop();\n        var numberOfWordsInQuote = dat.quote.split(' ').length;\n        var quoteDisplayTimeInSecs = Math.floor(numberOfWordsInQuote / 2 ) + 2;//use 1/2 of a second to display a word\n\n        //update the UI\n        this.quote = dat;\n        //find what 1 secs corresponds to in percontage\n        var incrementPerSecond = 100 /quoteDisplayTimeInSecs;\n\n\n        //we need to delay a little before doing animation, so that quote display transition will not cause quote meter to start reading while quote still not fully opacitied-out\n        this.quotesBarWidth = 0;\n        this.progressbar.set(0);\n        this.incrementQuoteWidth( incrementPerSecond );\n\n        //show next quote at the right time\n        var vm = this;\n        setTimeout(function(){\n          //we do not want animation when setting to zero\n          if(vm.ongoingTimeout){\n            clearTimeout( vm.ongoingTimeout );\n          }\n          vm.displayNextQuote();\n        }, (quoteDisplayTimeInSecs*1000) )\n      }else{\n\n        //wait a while before displaying next quote so that if it was network not copleted as at present time, network should have completed by time we retrying to show next quote\n        var vm = this;\n        setTimeout(function(){\n          vm.displayNextQuote();\n        },1000)\n\n      }\n    },\n    incrementQuoteWidth:function(increment){\n        this.quotesBarWidth += increment;\n        this.progressbar.animate(this.quotesBarWidth/100);\n        //ensure not to offshoot 100\n        if((this.quotesBarWidth+increment) <= 100){\n          var vm = this;\n          this.ongoingTimeout = setTimeout(function(){\n            vm.incrementQuoteWidth( increment );\n          }, 1000 )\n        }\n    },\n    retry_ajax_request:function( xhr ){\n        xhr.retry++;\n        if( xhr.retry < 10 ){\n          xhr.open(\"GET\", xhr.url, true);\n          xhr.send();\n        }else{\n        }\n    },\n    get_quotes_from_db:function( xhr = null ){\n      var vm = this;\n      if( xhr == null ){\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/git-collaborations/tcexam/admin/code/tce_quotes.php`;\n        xhr.open(\"GET\", xhr.url, true);\n        xhr.retry = 1;\n      }\n\n      //Send the proper header information along with the request\n      // xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.onreadystatechange = function() {//Call a function when the state changes.\n          if(xhr.readyState == 4) {\n              if(xhr.status == 200) {\n                // Request finished. Do processing here.\n                //eslint-disable-next-line\n                try{\n                  vm.available_quotes = [...JSON.parse( xhr.responseText ) ];\n                }\n                catch(Ex){\n                  console.log(Ex);\n                  console.log(xhr);\n                  vm.retry_ajax_request(xhr);\n                }\n              } else {\n                console.log(xhr);\n                console.log(xhr.status);\n                vm.retry_ajax_request(xhr);\n              }\n          }else{\n                //redo the request\n                //Value State Description\n              // 0 UNSENT  Client has been created. open() not called yet.\n              // 1 OPENED  open() has been called.\n              // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n              // 3 LOADING Downloading; responseText holds partial data.\n              // 4 DONE  The operation is complete.\n          }\n      }\n\n      xhr.send(\"foo=bar&lorem=ipsum\"); \n      // xhr.send('string'); \n      // xhr.send(new Blob()); \n      // xhr.send(new Int8Array()); \n      // xhr.send({ form: 'data' }); \n      // xhr.send(document);\n    },\n  }\n}\n",{"version":3,"sources":["Quotes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Quotes.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"absolute flex quotes-main-component w-full h-full\">\n    <div class=\"absolute inline-block h-48 mt-2 w-full\" v-show=\"this.show_quote\">\n\n      <blockquote class=\"flex flex-col justify-center\">\n\n        <transition\n          enter-active-class=\"animated fadeIn fast\"\n          leave-active-class=\"animated fadeOut faster\"\n          mode=\"out-in\"\n        >\n          <div class=\"quotation flex-1 tracking-wide text-center\">\n            <span class=\"pl-6 font-sans text-sm font-hairline\" :key=\"quote.quote\">\n              {{quote.quote}}\n            </span>\n          </div>\n        </transition>\n          \n          <div class=\"self-center block pin-r mr-2 mt-6 leading-loose\">\n            <div class=\"relative flex\">\n              <div class=\"mt-1 pin-y inline absolute opacity-50 p-1 w-6 h-6\" id=\"progressbar\"></div>\n              <div class=\"inline ml-8 pin-y author italic text-xs font-bold tracking-wide\">\n                <span class=\"font-heavy text-heavy\">&dash;</span>\n                  <transition\n                    enter-active-class=\"animated fadeIn fast\"\n                    leave-active-class=\"animated fadeOut faster\"\n                    mode=\"out-in\"\n                  >\n                    <span :key=\"quote.author\">\n                      {{quote.author}}\n                    </span>\n                </transition>\n              </div>\n              <!-- <small>{{quote.genre}}</small> -->\n            </div>\n          </div>\n      </blockquote>\n    </div>\n  </div>\n</template>\n\n<style type=\"text/css\">\n  .v-enter-active, .v-leave-active {\n    transition: opacity .5s;\n  }\n  .v-enter, .v-leave-to /* .v-leave-active below version 2.1.8 */ {\n    opacity: 0;\n  }\n</style>\n\n<script>\n\n  import ProgressBar from 'progressbar.js'\n\n   //get quotes from the database\n   //we will be getting 100 quotes randomly from the db\n   //we display  a quote every 7 secs\n   //at each display iteration, if quotes available is less than 20, we fetch another 100\nexport default {  \n  props: [\n      \"webserver_url\"\n  ],\n  data:function(){\n    return {\n      available_quotes:[],\n      quote: '',\n      quotes_change_interval: 7000,//in ms\n      show_quote: true,\n      quotesBarWidth: 0,\n      count: 0,\n      ongoingTimeout: 0,\n      progressbar: null\n    }\n  },\n  computed: {\n  },\n  mounted:function(){\n    this.progressbar = new ProgressBar.Circle(\"#progressbar\", {\n          strokeWidth: 9,\n          easing: 'linear',\n          duration: 1000,\n          color: 'grey',\n          trailColor: '',\n          trailWidth: 0,\n          svgStyle: null,\n          fill: null,\n          warnings: true\n        });\n  },\n  created: function () {\n      this.get_quotes_from_db();\n      this.displayNextQuote();\n  },\n  methods:{\n    displayNextQuote:function(){\n      if( this.available_quotes.length > 0 ) {\n\n        //don't allow us to run dry before refueling!!!\n        if( this.available_quotes.length < 20 ) {\n          this.get_quotes_from_db();\n        }\n\n        //a quote just compelted displaying\n        var dat = this.available_quotes.pop();\n        var numberOfWordsInQuote = dat.quote.split(' ').length;\n        var quoteDisplayTimeInSecs = Math.floor(numberOfWordsInQuote / 2 ) + 2;//use 1/2 of a second to display a word\n\n        //update the UI\n        this.quote = dat;\n        //find what 1 secs corresponds to in percontage\n        var incrementPerSecond = 100 /quoteDisplayTimeInSecs;\n\n\n        //we need to delay a little before doing animation, so that quote display transition will not cause quote meter to start reading while quote still not fully opacitied-out\n        this.quotesBarWidth = 0;\n        this.progressbar.set(0);\n        this.incrementQuoteWidth( incrementPerSecond );\n\n        //show next quote at the right time\n        var vm = this;\n        setTimeout(function(){\n          //we do not want animation when setting to zero\n          if(vm.ongoingTimeout){\n            clearTimeout( vm.ongoingTimeout );\n          }\n          vm.displayNextQuote();\n        }, (quoteDisplayTimeInSecs*1000) )\n      }else{\n\n        //wait a while before displaying next quote so that if it was network not copleted as at present time, network should have completed by time we retrying to show next quote\n        var vm = this;\n        setTimeout(function(){\n          vm.displayNextQuote();\n        },1000)\n\n      }\n    },\n    incrementQuoteWidth:function(increment){\n        this.quotesBarWidth += increment;\n        this.progressbar.animate(this.quotesBarWidth/100);\n        //ensure not to offshoot 100\n        if((this.quotesBarWidth+increment) <= 100){\n          var vm = this;\n          this.ongoingTimeout = setTimeout(function(){\n            vm.incrementQuoteWidth( increment );\n          }, 1000 )\n        }\n    },\n    retry_ajax_request:function( xhr ){\n        xhr.retry++;\n        if( xhr.retry < 10 ){\n          xhr.open(\"GET\", xhr.url, true);\n          xhr.send();\n        }else{\n        }\n    },\n    get_quotes_from_db:function( xhr = null ){\n      var vm = this;\n      if( xhr == null ){\n        xhr = new XMLHttpRequest();\n        xhr.url = `${this.webserver_url}/git-collaborations/tcexam/admin/code/tce_quotes.php`;\n        xhr.open(\"GET\", xhr.url, true);\n        xhr.retry = 1;\n      }\n\n      //Send the proper header information along with the request\n      // xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      xhr.onreadystatechange = function() {//Call a function when the state changes.\n          if(xhr.readyState == 4) {\n              if(xhr.status == 200) {\n                // Request finished. Do processing here.\n                //eslint-disable-next-line\n                try{\n                  vm.available_quotes = [...JSON.parse( xhr.responseText ) ];\n                }\n                catch(Ex){\n                  console.log(Ex);\n                  console.log(xhr);\n                  vm.retry_ajax_request(xhr);\n                }\n              } else {\n                console.log(xhr);\n                console.log(xhr.status);\n                vm.retry_ajax_request(xhr);\n              }\n          }else{\n                //redo the request\n                //Value State Description\n              // 0 UNSENT  Client has been created. open() not called yet.\n              // 1 OPENED  open() has been called.\n              // 2 HEADERS_RECEIVED  send() has been called, and headers and status are available.\n              // 3 LOADING Downloading; responseText holds partial data.\n              // 4 DONE  The operation is complete.\n          }\n      }\n\n      xhr.send(\"foo=bar&lorem=ipsum\"); \n      // xhr.send('string'); \n      // xhr.send(new Blob()); \n      // xhr.send(new Int8Array()); \n      // xhr.send({ form: 'data' }); \n      // xhr.send(document);\n    },\n  }\n}\n</script>\n"]}]}